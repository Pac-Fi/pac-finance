{
  "address": "0x17f968AC6Ac8c650d889c1179774BB98DBbd4B81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DecimalsAboveLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecimalsNotEqual",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_validityDuration",
          "type": "uint256"
        }
      ],
      "name": "setValidityDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validityDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd81da9450ab670ed25b206f8223773b5efbbbaf6f389947d37bdbaa383eaff0",
  "receipt": {
    "to": null,
    "from": "0xAEC7030b1d0352ccF1B7B946FD6a0AB6ECEa325E",
    "contractAddress": "0x17f968AC6Ac8c650d889c1179774BB98DBbd4B81",
    "transactionIndex": 3,
    "gasUsed": "432475",
    "logsBloom": "0x00000000080000000000800000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000200000000010000000000000000002000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa2b972bf768b172d6551e2b3f8c937b80f5852a0460bf59959addfdd39391922",
    "transactionHash": "0xfd81da9450ab670ed25b206f8223773b5efbbbaf6f389947d37bdbaa383eaff0",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 884844,
        "transactionHash": "0xfd81da9450ab670ed25b206f8223773b5efbbbaf6f389947d37bdbaa383eaff0",
        "address": "0x17f968AC6Ac8c650d889c1179774BB98DBbd4B81",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aec7030b1d0352ccf1b7b946fd6a0ab6ecea325e"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0xa2b972bf768b172d6551e2b3f8c937b80f5852a0460bf59959addfdd39391922"
      }
    ],
    "blockNumber": 884844,
    "cumulativeGasUsed": "636060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD76Ec3EDcF5547B4183BF5A82a4080Ff95B58C59"
  ],
  "numDeployments": 3,
  "solcInputHash": "9353b8d55291b17e44387d6c664be0d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DecimalsAboveLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsNotEqual\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_validityDuration\",\"type\":\"uint256\"}],\"name\":\"setValidityDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validityDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"latestAnswer()\":{\"notice\":\"Calculates the current answer based on the aggregators.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/API3OracleWrapper.sol\":\"API3OracleWrapper\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @dev See DapiProxy.sol for comments about usage\\ninterface IProxy {\\n    function read() external view returns (int224 value, uint32 timestamp);\\n\\n    function api3ServerV1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3ad69ef6ff3de4056ec43eb8b47465f3d896f88e95cfffb909a6d057b91db17b\",\"license\":\"MIT\"},\"@api3/contracts/v0.8/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@api3/airnode-protocol-v1/contracts/api3-server-v1/proxies/interfaces/IProxy.sol\\\";\\n\",\"keccak256\":\"0x46e0969d4682b2dad5c56a5f278ee447a3085fcc66c4e8bd261ef9cdcccfdc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/API3OracleWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@api3/contracts/v0.8/interfaces/IProxy.sol\\\";\\nimport {ICLSynchronicityPriceAdapter} from \\\"./interfaces/ICLSynchronicityPriceAdapter.sol\\\";\\n\\ncontract API3OracleWrapper is Ownable, ICLSynchronicityPriceAdapter {\\n    // The proxy contract address obtained from the API3 Market UI.\\n    address public immutable proxyAddress;\\n\\n    uint256 public validityDuration = 1 days;\\n\\n    constructor(address _proxyAddress) {\\n        proxyAddress = _proxyAddress;\\n    }\\n\\n    function setValidityDuration(uint256 _validityDuration) external onlyOwner {\\n        validityDuration = _validityDuration;\\n    }\\n\\n    /// @inheritdoc ICLSynchronicityPriceAdapter\\n    function latestAnswer() public view virtual override returns (int256) {\\n        (int224 value, uint256 timestamp) = IProxy(proxyAddress).read();\\n        require(block.timestamp - timestamp < validityDuration, \\\"price expired\\\");\\n        //convert decimals, api3 decimal is 18\\n        int256 convertedValue = int256(value) / 1e10;\\n        return convertedValue;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 8;\\n    }\\n}\\n\",\"keccak256\":\"0xa552f45ebc40d08228bec91da36e6a56d604b1fe902b58a4f71bf34007e190a4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICLSynchronicityPriceAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICLSynchronicityPriceAdapter {\\n    /**\\n     * @notice Calculates the current answer based on the aggregators.\\n     */\\n    function latestAnswer() external view returns (int256);\\n\\n    error DecimalsAboveLimit();\\n    error DecimalsNotEqual();\\n}\\n\",\"keccak256\":\"0x87a1d48750e707ff0956ddfd5ab87494eadea3085b8f2df175478b8735cb302b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526201518060015534801561001757600080fd5b506040516106f73803806106f7833981016040819052610036916100a0565b61003f33610050565b6001600160a01b03166080526100d0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100b257600080fd5b81516001600160a01b03811681146100c957600080fd5b9392505050565b6080516106066100f1600039600081816092015261016e01526106066000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063683ce0321161005b578063683ce03214610118578063715018a6146101215780638da5cb5b14610129578063f2fde38b1461014757600080fd5b806323f5c02d1461008d578063313ce567146100de57806343aa9df7146100ed57806350d25bcd14610102575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b604051600881526020016100d5565b6101006100fb36600461045c565b61015a565b005b61010a610167565b6040519081526020016100d5565b61010a60015481565b61010061029b565b60005473ffffffffffffffffffffffffffffffffffffffff166100b4565b610100610155366004610475565b6102af565b610162610366565b600155565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa1580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa91906104b2565b60015491935063ffffffff169150610212824261052a565b1061027e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f707269636520657870697265640000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006102936402540be400601b85900b610541565b949350505050565b6102a3610366565b6102ad60006103e7565b565b6102b7610366565b73ffffffffffffffffffffffffffffffffffffffff811661035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610275565b610363816103e7565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610275565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561046e57600080fd5b5035919050565b60006020828403121561048757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104ab57600080fd5b9392505050565b600080604083850312156104c557600080fd5b825180601b0b81146104d657600080fd5b602084015190925063ffffffff811681146104f057600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561053c5761053c6104fb565b500390565b600082610577577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156105cb576105cb6104fb565b50059056fea2646970667358221220d5fea52e2a2c5dadc86f8e3fe9e101d64011762090c2c1e9ca7f6892659befba64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063683ce0321161005b578063683ce03214610118578063715018a6146101215780638da5cb5b14610129578063f2fde38b1461014757600080fd5b806323f5c02d1461008d578063313ce567146100de57806343aa9df7146100ed57806350d25bcd14610102575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b604051600881526020016100d5565b6101006100fb36600461045c565b61015a565b005b61010a610167565b6040519081526020016100d5565b61010a60015481565b61010061029b565b60005473ffffffffffffffffffffffffffffffffffffffff166100b4565b610100610155366004610475565b6102af565b610162610366565b600155565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166357de26a46040518163ffffffff1660e01b81526004016040805180830381865afa1580156101d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fa91906104b2565b60015491935063ffffffff169150610212824261052a565b1061027e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f707269636520657870697265640000000000000000000000000000000000000060448201526064015b60405180910390fd5b60006102936402540be400601b85900b610541565b949350505050565b6102a3610366565b6102ad60006103e7565b565b6102b7610366565b73ffffffffffffffffffffffffffffffffffffffff811661035a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610275565b610363816103e7565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610275565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561046e57600080fd5b5035919050565b60006020828403121561048757600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146104ab57600080fd5b9392505050565b600080604083850312156104c557600080fd5b825180601b0b81146104d657600080fd5b602084015190925063ffffffff811681146104f057600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561053c5761053c6104fb565b500390565b600082610577577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156105cb576105cb6104fb565b50059056fea2646970667358221220d5fea52e2a2c5dadc86f8e3fe9e101d64011762090c2c1e9ca7f6892659befba64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "latestAnswer()": {
        "notice": "Calculates the current answer based on the aggregators."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/API3OracleWrapper.sol:API3OracleWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 177,
        "contract": "contracts/API3OracleWrapper.sol:API3OracleWrapper",
        "label": "validityDuration",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xE1Be819476C631E06Ba2f4c53DCB986937959bE3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yieldToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RescueToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "YieldDistributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "aTokenBalanceChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundTotalPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "distributeYield",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getPendingYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "getUserRoundPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTotalPointUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundSettleTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pointSettleRound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settledPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldSettleRound",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "yieldPerPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47ed529381cd99d5a0c1556a5274834e90b4caf7911f8d69316e0f8a6d91672d",
  "receipt": {
    "to": null,
    "from": "0x185782Ee7Cf9A91cc2dFb6F5cc695dD02284b899",
    "contractAddress": "0xE1Be819476C631E06Ba2f4c53DCB986937959bE3",
    "transactionIndex": 1,
    "gasUsed": "1421060",
    "logsBloom": "0x
    "blockHash": "0x83d0be225e9fccf88ede414e1b68fc67b927700de3eb0c009e02d1ccf6aeaee1",
    "transactionHash": "0x47ed529381cd99d5a0c1556a5274834e90b4caf7911f8d69316e0f8a6d91672d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 190561,
        "transactionHash": "0x47ed529381cd99d5a0c1556a5274834e90b4caf7911f8d69316e0f8a6d91672d",
        "address": "0xE1Be819476C631E06Ba2f4c53DCB986937959bE3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000185782ee7cf9a91cc2dfb6f5cc695dd02284b899"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x83d0be225e9fccf88ede414e1b68fc67b927700de3eb0c009e02d1ccf6aeaee1"
      }
    ],
    "blockNumber": 190561,
    "cumulativeGasUsed": "1471605",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc7206216F28C23B2Da6537d296e789CFB81b31Ef",
    "0x4300000000000000000000000000000000000003"
  ],
  "numDeployments": 2,
  "solcInputHash": "edaf08ba22681b670db8556a71ccfd74",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"YieldDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"aTokenBalanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundTotalPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distributeYield\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getUserRoundPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTotalPointUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundSettleTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pointSettleRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settledPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldSettleRound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yieldPerPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NativeYieldDistribute.sol\":\"NativeYieldDistribute\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/NativeYieldDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./core-v3/contracts/interfaces/IScaledBalanceToken.sol\\\";\\n\\ncontract NativeYieldDistribute is Ownable, Pausable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    event YieldDistributed(uint256 amount, uint256 timestamp);\\n\\n    event RescueToken(\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    struct UserInfo {\\n        uint256 currentBalance;\\n        uint256 balanceUpdateTime;\\n        uint256 pointSettleRound;\\n        uint256 settledPoint;\\n        uint256 yieldSettleRound;\\n        //roundId => point\\n        mapping(uint256 => uint256) roundPoint;\\n    }\\n    uint256 internal constant RAY = 1e27;\\n\\n    address public immutable yieldToken;\\n    address public immutable aToken;\\n\\n    // pool info\\n    //roundId => yield per point\\n    mapping(uint256 => uint256) public yieldPerPoint;\\n    //roundId => pool settle timestamp\\n    mapping(uint256 => uint256) public roundSettleTime;\\n    //current round info\\n    uint256 public lastTotalPointUpdateTime;\\n    uint256 public currentTotalSupply;\\n    uint256 public currentRoundTotalPoint;\\n    uint256 public currentRound;\\n\\n    // user info\\n    mapping(address => UserInfo) public userInfo;\\n\\n    constructor(address _aToken, address _yieldToken) {\\n        currentRound = 1;\\n        aToken = _aToken;\\n        yieldToken = _yieldToken;\\n    }\\n\\n    function aTokenBalanceChange(address user) external {\\n        //update total point\\n        _updateTotalPoint();\\n        currentTotalSupply = IScaledBalanceToken(aToken).scaledTotalSupply();\\n\\n        //update user info\\n        UserInfo storage info = userInfo[user];\\n        _updateUserPoint(info);\\n        info.currentBalance = IScaledBalanceToken(aToken).scaledBalanceOf(user);\\n    }\\n\\n    function getUserRoundPoint(\\n        address user,\\n        uint256 round\\n    ) public view returns (uint256) {\\n        if (round >= currentRound) {\\n            return 0;\\n        }\\n\\n        UserInfo storage info = userInfo[user];\\n        if (round <= info.pointSettleRound) {\\n            return info.roundPoint[round];\\n        }\\n\\n        uint256 roundStartTime = roundSettleTime[round - 1];\\n        uint256 roundEndTime = roundSettleTime[round];\\n        if (info.balanceUpdateTime <= roundStartTime) {\\n            uint256 roundDuration = roundEndTime - roundStartTime;\\n            return info.currentBalance * roundDuration;\\n        } else {\\n            uint256 roundDuration = roundEndTime - info.balanceUpdateTime;\\n            return info.settledPoint + info.currentBalance * roundDuration;\\n        }\\n    }\\n\\n    function getPendingYield(address user) external view returns (uint256) {\\n        UserInfo storage info = userInfo[user];\\n        uint256 poolSettledRound = currentRound - 1;\\n        uint256 accYield = 0;\\n        for (\\n            uint256 index = info.yieldSettleRound + 1;\\n            index <= poolSettledRound;\\n            index++\\n        ) {\\n            uint256 userPoint = getUserRoundPoint(user, index);\\n            uint256 yield = (userPoint * yieldPerPoint[index]) / RAY;\\n            accYield += yield;\\n        }\\n        return accYield;\\n    }\\n\\n    function claimYield() external whenNotPaused nonReentrant {\\n        address user = msg.sender;\\n        UserInfo storage info = userInfo[user];\\n        _updateUserPoint(info);\\n\\n        uint256 poolSettledRound = currentRound - 1;\\n        uint256 accYield = 0;\\n        for (\\n            uint256 index = info.yieldSettleRound + 1;\\n            index <= poolSettledRound;\\n            index++\\n        ) {\\n            uint256 userPoint = info.roundPoint[index];\\n            uint256 yield = (userPoint * yieldPerPoint[index]) / RAY;\\n            accYield += yield;\\n        }\\n        info.yieldSettleRound = poolSettledRound;\\n        _transferYield(msg.sender, accYield);\\n    }\\n\\n    function _updateTotalPoint() internal {\\n        uint256 timeDiff = block.timestamp - lastTotalPointUpdateTime;\\n        uint256 pendingPoint = currentTotalSupply * timeDiff;\\n        currentRoundTotalPoint = currentRoundTotalPoint + pendingPoint;\\n        lastTotalPointUpdateTime = block.timestamp;\\n    }\\n\\n    function _updateUserPoint(UserInfo storage info) internal {\\n        //update point for every passed round\\n        for (\\n            uint256 index = info.pointSettleRound + 1;\\n            index < currentRound;\\n            index++\\n        ) {\\n            uint256 roundEndTime = roundSettleTime[index];\\n            uint256 roundDuration = roundEndTime - info.balanceUpdateTime;\\n            uint256 totalRoundPoint = info.settledPoint +\\n                info.currentBalance *\\n                roundDuration;\\n            info.roundPoint[index] = totalRoundPoint;\\n            info.settledPoint = 0;\\n            info.balanceUpdateTime = roundEndTime;\\n        }\\n        uint256 pointSettleRound = currentRound - 1;\\n        info.pointSettleRound = pointSettleRound;\\n\\n        //update current round point\\n        uint256 duration;\\n        if (info.balanceUpdateTime > roundSettleTime[pointSettleRound]) {\\n            duration = block.timestamp - info.balanceUpdateTime;\\n        } else {\\n            duration = block.timestamp - roundSettleTime[pointSettleRound];\\n        }\\n        info.settledPoint = info.settledPoint + duration * info.currentBalance;\\n        info.balanceUpdateTime = block.timestamp;\\n    }\\n\\n    function _transferYield(address to, uint256 amount) internal {\\n        if (yieldToken == address(0)) {\\n            _safeTransferETH(to, amount);\\n        } else {\\n            IERC20(yieldToken).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    function distributeYield(uint256 amount) external payable onlyOwner {\\n        //1. update total point\\n        _updateTotalPoint();\\n\\n        //2. calculate yield per point\\n        if (yieldToken == address(0)) {\\n            require(amount == msg.value, \\\"invalid amount\\\");\\n        } else {\\n            IERC20(yieldToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        }\\n        uint256 currentRoundYieldPerPoint = (amount * RAY) /\\n            currentRoundTotalPoint;\\n\\n        //3. update round info\\n        yieldPerPoint[currentRound] = currentRoundYieldPerPoint;\\n        roundSettleTime[currentRound] = block.timestamp;\\n        currentRoundTotalPoint = 0;\\n        currentRound++;\\n\\n        emit YieldDistributed(amount, block.timestamp);\\n    }\\n\\n    function rescueToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (token == address(0)) {\\n            _safeTransferETH(to, amount);\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n        emit RescueToken(token, to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xdced1353bcf91d2a3828d09fe42c66e545a0e896d94a23b93e0ef57134d2f153\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted tokens\\n     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Mint(\\n        address indexed caller,\\n        address indexed onBehalfOf,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted after the burn action\\n     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n     * @param from The address from which the tokens will be burned\\n     * @param target The address that will receive the underlying, if any\\n     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Returns the scaled balance of the user.\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n     * at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     */\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled total supply\\n     */\\n    function getScaledUserBalanceAndSupply(\\n        address user\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns last index interest was accrued to the user's balance\\n     * @param user The address of the user\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\n     */\\n    function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xefec728d1fe7d2384e5faf852bad7c5ff6d59d1031900384e1f9c175edff28e4\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620018f7380380620018f78339810160408190526200003491620000d9565b6200003f336200006c565b6000805460ff60a01b1916905560018080556007556001600160a01b0391821660a0521660805262000111565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d457600080fd5b919050565b60008060408385031215620000ed57600080fd5b620000f883620000bc565b91506200010860208401620000bc565b90509250929050565b60805160a051611796620001616000396000818161039a0152818161070d01526108100152600081816102e0015281816108920152818161095801528181610dbc0152610e1d01526117966000f3fe6080604052600436106101445760003560e01c806376d5de85116100c0578063aa15738a11610074578063d59d9bb111610059578063d59d9bb1146103e5578063e5711e8b14610412578063f2fde38b1461043257600080fd5b8063aa15738a146103bc578063c8cc5cd8146103d257600080fd5b80638a19c8bc116100a55780638a19c8bc146103475780638da5cb5b1461035d578063a0c1f15e1461038857600080fd5b806376d5de85146102ce578063842dd94f1461032757600080fd5b8063410b1da8116101175780635c975abb116100fc5780635c975abb1461025e578063715018a61461029957806373046339146102ae57600080fd5b8063410b1da814610228578063537bb1371461023e57600080fd5b80631959a002146101495780632eca952a146101c057806333054614146101e4578063406cf22914610211575b600080fd5b34801561015557600080fd5b506101936101643660046114dc565b600860205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b3480156101cc57600080fd5b506101d660045481565b6040519081526020016101b7565b3480156101f057600080fd5b506101d66101ff3660046114fe565b60026020526000908152604090205481565b34801561021d57600080fd5b50610226610452565b005b34801561023457600080fd5b506101d660055481565b34801561024a57600080fd5b506101d66102593660046114dc565b610530565b34801561026a57600080fd5b5060005474010000000000000000000000000000000000000000900460ff1660405190151581526020016101b7565b3480156102a557600080fd5b506102266105f3565b3480156102ba57600080fd5b506101d66102c9366004611517565b610605565b3480156102da57600080fd5b506103027f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b7565b34801561033357600080fd5b506102266103423660046114dc565b610703565b34801561035357600080fd5b506101d660075481565b34801561036957600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610302565b34801561039457600080fd5b506103027f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c857600080fd5b506101d660065481565b6102266103e03660046114fe565b610880565b3480156103f157600080fd5b506101d66104003660046114fe565b60036020526000908152604090205481565b34801561041e57600080fd5b5061022661042d366004611541565b610a20565b34801561043e57600080fd5b5061022661044d3660046114dc565b610adf565b61045a610b96565b610462610c1b565b33600081815260086020526040902061047a81610c8f565b6000600160075461048b91906115ac565b9050600080836004015460016104a191906115c3565b90505b82811161050f57600081815260058501602090815260408083205460029092528220549091906b033b2e3c9fd0803ce8000000906104e290846115db565b6104ec9190611618565b90506104f881856115c3565b93505050808061050790611653565b9150506104a4565b50600483018290556105213382610dba565b5050505061052e60018055565b565b73ffffffffffffffffffffffffffffffffffffffff811660009081526008602052604081206007548290610566906001906115ac565b90506000808360040154600161057c91906115c3565b90505b8281116105ea5760006105928783610605565b600083815260026020526040812054919250906b033b2e3c9fd0803ce8000000906105bd90846115db565b6105c79190611618565b90506105d381856115c3565b9350505080806105e290611653565b91505061057f565b50949350505050565b6105fb610e44565b61052e6000610ec5565b60006007548210610618575060006106fd565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260409020600281015483116106615760008381526005909101602052604090205490506106fd565b60006003816106716001876115ac565b8152602001908152602001600020549050600060036000868152602001908152602001600020549050818360010154116106cc5760006106b183836115ac565b84549091506106c19082906115db565b9450505050506106fd565b60008360010154826106de91906115ac565b84549091506106ee9082906115db565b84600301546106c191906115c3565b92915050565b61070b610f3a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a919061168c565b60055573ffffffffffffffffffffffffffffffffffffffff811660009081526008602052604090206107cb81610c8f565b6040517f1da24f3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f00000000000000000000000000000000000000000000000000000000000000001690631da24f3e90602401602060405180830381865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b919061168c565b905550565b610888610e44565b610890610f3a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661093e57348114610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064015b60405180910390fd5b610980565b61098073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084610f77565b60065460009061099c6b033b2e3c9fd0803ce8000000846115db565b6109a69190611618565b6007805460009081526002602090815260408083208590558354835260039091528120429055600681905581549293506109df83611653565b9091555050604080518381524260208201527ffe4996cd48c364c468cee70dd6b9061874ff01b05c5ea49311cbcabd9b9cb615910160405180910390a15050565b610a28610e44565b73ffffffffffffffffffffffffffffffffffffffff8316610a5257610a4d8282611059565b610a73565b610a7373ffffffffffffffffffffffffffffffffffffffff84168383611142565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167faabf44ab9d5bef08d1b60f287a337f0d11a248e49741ad189b429e47e98ba91083604051610ad291815260200190565b60405180910390a3505050565b610ae7610e44565b73ffffffffffffffffffffffffffffffffffffffff8116610b8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610930565b610b9381610ec5565b50565b60005474010000000000000000000000000000000000000000900460ff161561052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610930565b60026001541415610c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610930565b6002600155565b600081600201546001610ca291906115c3565b90505b600754811015610d25576000818152600360205260408120546001840154909190610cd090836115ac565b90506000818560000154610ce491906115db565b8560030154610cf391906115c3565b600085815260058701602052604081209190915560038601555050600183015580610d1d81611653565b915050610ca5565b5060006001600754610d3791906115ac565b60028301819055600081815260036020526040812054600185015492935090911115610d73576001830154610d6c90426115ac565b9050610d8f565b600082815260036020526040902054610d8c90426115ac565b90505b8254610d9b90826115db565b8360030154610daa91906115c3565b6003840155505042600190910155565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e0357610dff8282611059565b5050565b610dff73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168383611142565b60005473ffffffffffffffffffffffffffffffffffffffff16331461052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610930565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060045442610f4a91906115ac565b9050600081600554610f5c91906115db565b905080600654610f6c91906115c3565b600655505042600455565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526110539085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611198565b50505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff841690839060405161109091906116d1565b60006040518083038185875af1925050503d80600081146110cd576040519150601f19603f3d011682016040523d82523d6000602084013e6110d2565b606091505b505090508061113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610930565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261113d9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610fd1565b60006111fa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112a79092919063ffffffff16565b905080516000148061121b57508080602001905181019061121b91906116ed565b61113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610930565b60606112b684846000856112be565b949350505050565b606082471015611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610930565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161137991906116d1565b60006040518083038185875af1925050503d80600081146113b6576040519150601f19603f3d011682016040523d82523d6000602084013e6113bb565b606091505b50915091506113cc878383876113d7565b979650505050505050565b6060831561146a5782516114635773ffffffffffffffffffffffffffffffffffffffff85163b611463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610930565b50816112b6565b6112b6838381511561147f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930919061170f565b803573ffffffffffffffffffffffffffffffffffffffff811681146114d757600080fd5b919050565b6000602082840312156114ee57600080fd5b6114f7826114b3565b9392505050565b60006020828403121561151057600080fd5b5035919050565b6000806040838503121561152a57600080fd5b611533836114b3565b946020939093013593505050565b60008060006060848603121561155657600080fd5b61155f846114b3565b925061156d602085016114b3565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156115be576115be61157d565b500390565b600082198211156115d6576115d661157d565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116135761161361157d565b500290565b60008261164e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116855761168561157d565b5060010190565b60006020828403121561169e57600080fd5b5051919050565b60005b838110156116c05781810151838201526020016116a8565b838111156110535750506000910152565b600082516116e38184602087016116a5565b9190910192915050565b6000602082840312156116ff57600080fd5b815180151581146114f757600080fd5b602081526000825180602084015261172e8160408501602087016116a5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212208f7b07bb4bbc3ec35f896cb3fc08d7405a19a3991fbb0f2d456d1455bb2754dc64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c806376d5de85116100c0578063aa15738a11610074578063d59d9bb111610059578063d59d9bb1146103e5578063e5711e8b14610412578063f2fde38b1461043257600080fd5b8063aa15738a146103bc578063c8cc5cd8146103d257600080fd5b80638a19c8bc116100a55780638a19c8bc146103475780638da5cb5b1461035d578063a0c1f15e1461038857600080fd5b806376d5de85146102ce578063842dd94f1461032757600080fd5b8063410b1da8116101175780635c975abb116100fc5780635c975abb1461025e578063715018a61461029957806373046339146102ae57600080fd5b8063410b1da814610228578063537bb1371461023e57600080fd5b80631959a002146101495780632eca952a146101c057806333054614146101e4578063406cf22914610211575b600080fd5b34801561015557600080fd5b506101936101643660046114dc565b600860205260009081526040902080546001820154600283015460038401546004909401549293919290919085565b604080519586526020860194909452928401919091526060830152608082015260a0015b60405180910390f35b3480156101cc57600080fd5b506101d660045481565b6040519081526020016101b7565b3480156101f057600080fd5b506101d66101ff3660046114fe565b60026020526000908152604090205481565b34801561021d57600080fd5b50610226610452565b005b34801561023457600080fd5b506101d660055481565b34801561024a57600080fd5b506101d66102593660046114dc565b610530565b34801561026a57600080fd5b5060005474010000000000000000000000000000000000000000900460ff1660405190151581526020016101b7565b3480156102a557600080fd5b506102266105f3565b3480156102ba57600080fd5b506101d66102c9366004611517565b610605565b3480156102da57600080fd5b506103027f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b7565b34801561033357600080fd5b506102266103423660046114dc565b610703565b34801561035357600080fd5b506101d660075481565b34801561036957600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610302565b34801561039457600080fd5b506103027f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c857600080fd5b506101d660065481565b6102266103e03660046114fe565b610880565b3480156103f157600080fd5b506101d66104003660046114fe565b60036020526000908152604090205481565b34801561041e57600080fd5b5061022661042d366004611541565b610a20565b34801561043e57600080fd5b5061022661044d3660046114dc565b610adf565b61045a610b96565b610462610c1b565b33600081815260086020526040902061047a81610c8f565b6000600160075461048b91906115ac565b9050600080836004015460016104a191906115c3565b90505b82811161050f57600081815260058501602090815260408083205460029092528220549091906b033b2e3c9fd0803ce8000000906104e290846115db565b6104ec9190611618565b90506104f881856115c3565b93505050808061050790611653565b9150506104a4565b50600483018290556105213382610dba565b5050505061052e60018055565b565b73ffffffffffffffffffffffffffffffffffffffff811660009081526008602052604081206007548290610566906001906115ac565b90506000808360040154600161057c91906115c3565b90505b8281116105ea5760006105928783610605565b600083815260026020526040812054919250906b033b2e3c9fd0803ce8000000906105bd90846115db565b6105c79190611618565b90506105d381856115c3565b9350505080806105e290611653565b91505061057f565b50949350505050565b6105fb610e44565b61052e6000610ec5565b60006007548210610618575060006106fd565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260409020600281015483116106615760008381526005909101602052604090205490506106fd565b60006003816106716001876115ac565b8152602001908152602001600020549050600060036000868152602001908152602001600020549050818360010154116106cc5760006106b183836115ac565b84549091506106c19082906115db565b9450505050506106fd565b60008360010154826106de91906115ac565b84549091506106ee9082906115db565b84600301546106c191906115c3565b92915050565b61070b610f3a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b1bf962d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a919061168c565b60055573ffffffffffffffffffffffffffffffffffffffff811660009081526008602052604090206107cb81610c8f565b6040517f1da24f3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f00000000000000000000000000000000000000000000000000000000000000001690631da24f3e90602401602060405180830381865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b919061168c565b905550565b610888610e44565b610890610f3a565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661093e57348114610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c696420616d6f756e7400000000000000000000000000000000000060448201526064015b60405180910390fd5b610980565b61098073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084610f77565b60065460009061099c6b033b2e3c9fd0803ce8000000846115db565b6109a69190611618565b6007805460009081526002602090815260408083208590558354835260039091528120429055600681905581549293506109df83611653565b9091555050604080518381524260208201527ffe4996cd48c364c468cee70dd6b9061874ff01b05c5ea49311cbcabd9b9cb615910160405180910390a15050565b610a28610e44565b73ffffffffffffffffffffffffffffffffffffffff8316610a5257610a4d8282611059565b610a73565b610a7373ffffffffffffffffffffffffffffffffffffffff84168383611142565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167faabf44ab9d5bef08d1b60f287a337f0d11a248e49741ad189b429e47e98ba91083604051610ad291815260200190565b60405180910390a3505050565b610ae7610e44565b73ffffffffffffffffffffffffffffffffffffffff8116610b8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610930565b610b9381610ec5565b50565b60005474010000000000000000000000000000000000000000900460ff161561052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610930565b60026001541415610c88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610930565b6002600155565b600081600201546001610ca291906115c3565b90505b600754811015610d25576000818152600360205260408120546001840154909190610cd090836115ac565b90506000818560000154610ce491906115db565b8560030154610cf391906115c3565b600085815260058701602052604081209190915560038601555050600183015580610d1d81611653565b915050610ca5565b5060006001600754610d3791906115ac565b60028301819055600081815260036020526040812054600185015492935090911115610d73576001830154610d6c90426115ac565b9050610d8f565b600082815260036020526040902054610d8c90426115ac565b90505b8254610d9b90826115db565b8360030154610daa91906115c3565b6003840155505042600190910155565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610e0357610dff8282611059565b5050565b610dff73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168383611142565b60005473ffffffffffffffffffffffffffffffffffffffff16331461052e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610930565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060045442610f4a91906115ac565b9050600081600554610f5c91906115db565b905080600654610f6c91906115c3565b600655505042600455565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526110539085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611198565b50505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff841690839060405161109091906116d1565b60006040518083038185875af1925050503d80600081146110cd576040519150601f19603f3d011682016040523d82523d6000602084013e6110d2565b606091505b505090508061113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610930565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261113d9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610fd1565b60006111fa826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166112a79092919063ffffffff16565b905080516000148061121b57508080602001905181019061121b91906116ed565b61113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610930565b60606112b684846000856112be565b949350505050565b606082471015611350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610930565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161137991906116d1565b60006040518083038185875af1925050503d80600081146113b6576040519150601f19603f3d011682016040523d82523d6000602084013e6113bb565b606091505b50915091506113cc878383876113d7565b979650505050505050565b6060831561146a5782516114635773ffffffffffffffffffffffffffffffffffffffff85163b611463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610930565b50816112b6565b6112b6838381511561147f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930919061170f565b803573ffffffffffffffffffffffffffffffffffffffff811681146114d757600080fd5b919050565b6000602082840312156114ee57600080fd5b6114f7826114b3565b9392505050565b60006020828403121561151057600080fd5b5035919050565b6000806040838503121561152a57600080fd5b611533836114b3565b946020939093013593505050565b60008060006060848603121561155657600080fd5b61155f846114b3565b925061156d602085016114b3565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156115be576115be61157d565b500390565b600082198211156115d6576115d661157d565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116135761161361157d565b500290565b60008261164e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116855761168561157d565b5060010190565b60006020828403121561169e57600080fd5b5051919050565b60005b838110156116c05781810151838201526020016116a8565b838111156110535750506000910152565b600082516116e38184602087016116a5565b9190910192915050565b6000602082840312156116ff57600080fd5b815180151581146114f757600080fd5b602081526000825180602084015261172e8160408501602087016116a5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212208f7b07bb4bbc3ec35f896cb3fc08d7405a19a3991fbb0f2d456d1455bb2754dc64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 231,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1463,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "yieldPerPoint",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1467,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "roundSettleTime",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1469,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "lastTotalPointUpdateTime",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1471,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "currentTotalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1473,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "currentRoundTotalPoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1475,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "currentRound",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1480,
        "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
        "label": "userInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(UserInfo)1452_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)1452_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NativeYieldDistribute.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1452_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserInfo)1452_storage": {
        "encoding": "inplace",
        "label": "struct NativeYieldDistribute.UserInfo",
        "members": [
          {
            "astId": 1439,
            "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
            "label": "currentBalance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1441,
            "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
            "label": "balanceUpdateTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1443,
            "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
            "label": "pointSettleRound",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1445,
            "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
            "label": "settledPoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1447,
            "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
            "label": "yieldSettleRound",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1451,
            "contract": "contracts/NativeYieldDistribute.sol:NativeYieldDistribute",
            "label": "roundPoint",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xfDe98aB7a6602ad55462297D952CE25b58743140",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FeatureNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFlashLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMsgValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiveNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "LeverageDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositAsset",
          "type": "address"
        }
      ],
      "name": "MultiplierDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RescueToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "borrowERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        }
      ],
      "name": "borrowETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "claimRefundedGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasRefund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cashAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "leverageDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cashAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "depositAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "swapPath",
          "type": "address[]"
        }
      ],
      "name": "multiplierDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "repayERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "repayETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasRefund",
          "type": "address"
        }
      ],
      "name": "setGasRefund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "supplyERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x91297ba6eeab7d629f76253c68c4d89b93fb0f732f319b08b85899c134170a6e",
  "receipt": {
    "to": null,
    "from": "0xAEC7030b1d0352ccF1B7B946FD6a0AB6ECEa325E",
    "contractAddress": "0xfDe98aB7a6602ad55462297D952CE25b58743140",
    "transactionIndex": 6,
    "gasUsed": "3759319",
    "logsBloom": "0x
    "blockHash": "0xd8b055e56ce5ad8f7783c3d6289ae39b8a34b3a29734257df92d95e7681e2aba",
    "transactionHash": "0x91297ba6eeab7d629f76253c68c4d89b93fb0f732f319b08b85899c134170a6e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 1099415,
        "transactionHash": "0x91297ba6eeab7d629f76253c68c4d89b93fb0f732f319b08b85899c134170a6e",
        "address": "0xfDe98aB7a6602ad55462297D952CE25b58743140",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aec7030b1d0352ccf1b7b946fd6a0ab6ecea325e"
        ],
        "data": "0x",
        "logIndex": 151,
        "blockHash": "0xd8b055e56ce5ad8f7783c3d6289ae39b8a34b3a29734257df92d95e7681e2aba"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 1099415,
        "transactionHash": "0x91297ba6eeab7d629f76253c68c4d89b93fb0f732f319b08b85899c134170a6e",
        "address": "0x4300000000000000000000000000000000000004",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fde98ab7a6602ad55462297d952ce25b58743140",
          "0x000000000000000000000000d2499b3c8611e36ca89a70fda2a72c49ee19eaa8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 152,
        "blockHash": "0xd8b055e56ce5ad8f7783c3d6289ae39b8a34b3a29734257df92d95e7681e2aba"
      }
    ],
    "blockNumber": 1099415,
    "cumulativeGasUsed": "12159226",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd2499b3c8611E36ca89A70Fda2A72C49eE19eAa8",
    "0x4300000000000000000000000000000000000004"
  ],
  "numDeployments": 2,
  "solcInputHash": "8f8cf24bc973924d3a44e7c1fafe57ee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeatureNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFlashLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiveNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"LeverageDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"}],\"name\":\"MultiplierDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"borrowERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claimRefundedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"leverageDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cashAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"name\":\"multiplierDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repayERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repayETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasRefund\",\"type\":\"address\"}],\"name\":\"setGasRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"supplyERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"PAC\",\"events\":{\"LeverageDeposit(address,address,uint256,uint256)\":{\"details\":\"Emitted during leverageDeposit()\",\"params\":{\"asset\":\"The address of the asset\",\"borrowAmount\":\"The amount borrowed from lending pool for the deposit*\",\"cashAmount\":\"The amount of cash for the deposit\",\"user\":\"The address of the user\"}},\"MultiplierDeposit(address,address,uint256,uint256,address)\":{\"details\":\"Emitted during multiplierDeposit()\",\"params\":{\"asset\":\"The address of the asset\",\"borrowAmount\":\"The amount borrowed from lending pool for the deposit\",\"cashAmount\":\"The amount of cash for the deposit\",\"depositAsset\":\"The address of the deposit asset*\",\"user\":\"The address of the user\"}},\"RescueToken(address,address,uint256)\":{\"details\":\"Emitted during rescueToken()\",\"params\":{\"amount\":\"The amount being rescued*\",\"to\":\"The address of the recipient\",\"token\":\"The address of the token\"}}},\"kind\":\"dev\",\"methods\":{\"borrowETH(uint256,uint256)\":{\"details\":\"borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `Pool.borrow`.\",\"params\":{\"amount\":\"the amount of ETH to borrow\",\"interestRateMode\":\"the interest rate mode\"}},\"depositETH(address)\":{\"details\":\"deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens) is minted.\",\"params\":{\"onBehalfOf\":\"address of the user who will receive the aTokens representing the deposit*\"}},\"executeOperation(address,uint256,uint256,address,bytes)\":{\"details\":\"Ensure that the contract can return the debt + premium, e.g., has      enough funds to repay and has approved the Pool to pull the total amount\",\"params\":{\"amount\":\"The amount of the flash-borrowed asset\",\"asset\":\"The address of the flash-borrowed asset\",\"initiator\":\"The address of the flashloan initiator\",\"params\":\"The byte-encoded params passed when initiating the flashloan\",\"premium\":\"The fee of the flash-borrowed asset\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds, false otherwise\"}},\"leverageDeposit(address,uint256,uint256)\":{\"details\":\"Loop the deposit and borrow of an asset\",\"params\":{\"asset\":\"to deposit\",\"borrowAmount\":\"borrow amount for the deposit*\",\"cashAmount\":\"cash amount for the deposit\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repayETH(uint256,uint256,address)\":{\"details\":\"repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\",\"params\":{\"amount\":\"the amount to repay, or uint256(-1) if the user wants to repay everything\",\"onBehalfOf\":\"the address for which msg.sender is repaying\",\"rateMode\":\"the rate mode to repay\"}},\"rescueToken(address,address,uint256)\":{\"params\":{\"amount\":\"The amount to be rescued*\",\"to\":\"The account address to receive token\",\"token\":\"The token address to be rescued\"}},\"setGasRefund(address)\":{\"params\":{\"_gasRefund\":\"The address of user gas refund contract*\"}},\"supplyERC20(address,uint256,address)\":{\"params\":{\"amount\":\"The amount to be supplied\",\"asset\":\"The address of the underlying asset to supply\",\"onBehalfOf\":\"The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawERC20(address,uint256,address)\":{\"params\":{\"amount\":\"The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance\",\"asset\":\"The address of the underlying asset to withdraw\",\"to\":\"The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet\"}},\"withdrawETH(uint256,address)\":{\"details\":\"withdraws the WETH _reserves of msg.sender.\",\"params\":{\"amount\":\"amount of aWETH to withdraw and receive native ETH\",\"to\":\"address of the user who will receive native ETH\"}}},\"title\":\"PAC Pool Wrapper Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"POOL()\":{\"notice\":\"Lending Pool address\"},\"WETH()\":{\"notice\":\"Wrapped ETH contract address\"},\"executeOperation(address,uint256,uint256,address,bytes)\":{\"notice\":\"Executes an operation after receiving the flash-borrowed asset\"},\"gasRefund()\":{\"notice\":\"Gas refund contract address\"},\"rescueToken(address,address,uint256)\":{\"notice\":\"Rescue erc20/ETH from this contract address. Only owner can call this function\"},\"setGasRefund(address)\":{\"notice\":\"Set gas refund address. Only owner can call this function\"},\"supplyERC20(address,uint256,address)\":{\"notice\":\"Supplly an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC\"},\"swapRouter()\":{\"notice\":\"UniswapV2 swap router contract address\"},\"withdrawERC20(address,uint256,address)\":{\"notice\":\"Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PacPoolWrapper.sol\":\"PacPoolWrapper\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/PacPoolWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IPool, DataTypes} from \\\"./core-v3/contracts/interfaces/IPool.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"./core-v3/contracts/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IWETH} from \\\"./core-v3/contracts/misc/interfaces/IWETH.sol\\\";\\nimport {IFlashLoanSimpleReceiver} from \\\"./core-v3/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol\\\";\\nimport {IAToken} from \\\"./core-v3/contracts/interfaces/IAToken.sol\\\";\\nimport {DataTypesHelper} from \\\"./periphery-v3/contracts/libraries/DataTypesHelper.sol\\\";\\nimport {IGasRefund} from \\\"./interfaces/IGasRefund.sol\\\";\\nimport {IBlast} from \\\"./interfaces/IBlast.sol\\\";\\nimport {IUniswapV2Router02} from \\\"./dependencies/uniswapv2/interfaces/IUniswapV2Router02.sol\\\";\\n\\n/// @title PAC Pool Wrapper Contract\\n/// @author PAC\\ncontract PacPoolWrapper is Ownable, ReentrancyGuard, IFlashLoanSimpleReceiver {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Lending Pool address\\n    IPool public immutable POOL;\\n\\n    /// @notice Wrapped ETH contract address\\n    IWETH public immutable WETH;\\n\\n    /// @notice UniswapV2 swap router contract address\\n    IUniswapV2Router02 public swapRouter;\\n\\n    /// @notice Gas refund contract address\\n    address public gasRefund;\\n\\n    uint16 private constant referralCode = 0;\\n\\n    error AddressZero();\\n\\n    error ReceiveNotAllowed();\\n\\n    error InvalidFlashLoan();\\n\\n    error ZeroAmount();\\n\\n    error InvalidMsgValue();\\n\\n    error InvalidParam();\\n\\n    error FeatureNotActive();\\n\\n    enum OperationType {\\n        Leverage,\\n        Multiplier\\n    }\\n\\n    /**\\n     * @dev Emitted during leverageDeposit()\\n     * @param user The address of the user\\n     * @param asset The address of the asset\\n     * @param cashAmount The amount of cash for the deposit\\n     * @param borrowAmount The amount borrowed from lending pool for the deposit\\n     **/\\n    event LeverageDeposit(\\n        address user,\\n        address asset,\\n        uint256 cashAmount,\\n        uint256 borrowAmount\\n    );\\n\\n    /**\\n     * @dev Emitted during multiplierDeposit()\\n     * @param user The address of the user\\n     * @param asset The address of the asset\\n     * @param cashAmount The amount of cash for the deposit\\n     * @param borrowAmount The amount borrowed from lending pool for the deposit\\n     * @param depositAsset The address of the deposit asset\\n     **/\\n    event MultiplierDeposit(\\n        address user,\\n        address asset,\\n        uint256 cashAmount,\\n        uint256 borrowAmount,\\n        address depositAsset\\n    );\\n\\n    /**\\n     * @dev Emitted during rescueToken()\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount being rescued\\n     **/\\n    event RescueToken(\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    constructor(address _lendingPool, address _weth) {\\n        if (address(_lendingPool) == address(0)) revert AddressZero();\\n        if (address(_weth) == address(0)) revert AddressZero();\\n\\n        POOL = IPool(_lendingPool);\\n        WETH = IWETH(_weth);\\n        WETH.approve(_lendingPool, type(uint256).max);\\n\\n        address blast = POOL.BLAST();\\n        if (blast != address(0)) {\\n            IBlast(blast).configureClaimableGas();\\n        }\\n    }\\n\\n    /**\\n     * @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether to this contract.\\n     */\\n    receive() external payable {\\n        if (msg.sender != address(WETH)) revert ReceiveNotAllowed();\\n    }\\n\\n    function _addGasRefund(\\n        uint256 gasConsumed,\\n        IGasRefund.RefundType refundType\\n    ) internal {\\n        if (gasRefund != address(0)) {\\n            uint256 refund = gasConsumed * tx.gasprice;\\n            IGasRefund(gasRefund).addGasRefund(msg.sender, refund, refundType);\\n        }\\n    }\\n\\n    /**\\n     * @dev deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens)\\n     * is minted.\\n     * @param onBehalfOf address of the user who will receive the aTokens representing the deposit\\n     **/\\n    function depositETH(address onBehalfOf) external payable nonReentrant {\\n        WETH.deposit{value: msg.value}();\\n        uint256 gasBegin = gasleft();\\n        POOL.deposit(address(WETH), msg.value, onBehalfOf, referralCode);\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.SUPPLY);\\n    }\\n\\n    /**\\n     * @dev withdraws the WETH _reserves of msg.sender.\\n     * @param amount amount of aWETH to withdraw and receive native ETH\\n     * @param to address of the user who will receive native ETH\\n     */\\n    function withdrawETH(uint256 amount, address to) external nonReentrant {\\n        IAToken aWETH = IAToken(\\n            POOL.getReserveData(address(WETH)).aTokenAddress\\n        );\\n        uint256 userBalance = aWETH.balanceOf(msg.sender);\\n        uint256 amountToWithdraw = amount;\\n\\n        // if amount is equal to uint(-1), the user wants to redeem everything\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n        aWETH.transferFrom(msg.sender, address(this), amountToWithdraw);\\n\\n        uint256 gasBegin = gasleft();\\n        POOL.withdraw(address(WETH), amountToWithdraw, address(this));\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.WITHDRAW);\\n\\n        WETH.withdraw(amountToWithdraw);\\n        _safeTransferETH(to, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).\\n     * @param amount the amount to repay, or uint256(-1) if the user wants to repay everything\\n     * @param rateMode the rate mode to repay\\n     * @param onBehalfOf the address for which msg.sender is repaying\\n     */\\n    function repayETH(\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external payable nonReentrant {\\n        (uint256 stableDebt, uint256 variableDebt) = DataTypesHelper\\n            .getUserCurrentDebt(onBehalfOf, POOL.getReserveData(address(WETH)));\\n\\n        uint256 paybackAmount = DataTypes.InterestRateMode(rateMode) ==\\n            DataTypes.InterestRateMode.STABLE\\n            ? stableDebt\\n            : variableDebt;\\n\\n        if (amount < paybackAmount) {\\n            paybackAmount = amount;\\n        }\\n        require(\\n            msg.value >= paybackAmount,\\n            \\\"msg.value is less than repayment amount\\\"\\n        );\\n        WETH.deposit{value: paybackAmount}();\\n\\n        uint256 gasBegin = gasleft();\\n        POOL.repay(address(WETH), msg.value, rateMode, onBehalfOf);\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.REPAY);\\n\\n        // refund remaining dust eth\\n        if (msg.value > paybackAmount)\\n            _safeTransferETH(msg.sender, msg.value - paybackAmount);\\n    }\\n\\n    /**\\n     * @dev borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `Pool.borrow`.\\n     * @param amount the amount of ETH to borrow\\n     * @param interestRateMode the interest rate mode\\n     */\\n    function borrowETH(\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external nonReentrant {\\n        uint256 gasBegin = gasleft();\\n        POOL.borrow(\\n            address(WETH),\\n            amount,\\n            interestRateMode,\\n            referralCode,\\n            msg.sender\\n        );\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.BORROW);\\n\\n        WETH.withdraw(amount);\\n        _safeTransferETH(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Supplly an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     */\\n    function supplyERC20(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) external nonReentrant {\\n        if (amount == 0) revert ZeroAmount();\\n        if (amount > 0) {\\n            IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        _checkApprove(asset, address(POOL));\\n\\n        uint256 gasBegin = gasleft();\\n        POOL.supply(asset, amount, onBehalfOf, referralCode);\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.SUPPLY);\\n    }\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     */\\n    function withdrawERC20(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external nonReentrant {\\n        IAToken aToken = IAToken(\\n            POOL.getReserveData(address(asset)).aTokenAddress\\n        );\\n        uint256 userBalance = aToken.balanceOf(msg.sender);\\n        uint256 amountToWithdraw = amount;\\n\\n        // if amount is equal to uint(-1), the user wants to redeem everything\\n        if (amount == type(uint256).max) {\\n            amountToWithdraw = userBalance;\\n        }\\n        aToken.transferFrom(msg.sender, address(this), amountToWithdraw);\\n\\n        uint256 gasBegin = gasleft();\\n        POOL.withdraw(asset, amountToWithdraw, to);\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.WITHDRAW);\\n    }\\n\\n    function borrowERC20(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external nonReentrant {\\n        uint256 gasBegin = gasleft();\\n        POOL.borrow(asset, amount, interestRateMode, referralCode, msg.sender);\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.BORROW);\\n\\n        IERC20(asset).safeTransfer(msg.sender, amount);\\n    }\\n\\n    function repayERC20(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external nonReentrant {\\n        (uint256 stableDebt, uint256 variableDebt) = DataTypesHelper\\n            .getUserCurrentDebt(onBehalfOf, POOL.getReserveData(asset));\\n\\n        uint256 paybackAmount = DataTypes.InterestRateMode(interestRateMode) ==\\n            DataTypes.InterestRateMode.STABLE\\n            ? stableDebt\\n            : variableDebt;\\n\\n        if (amount < paybackAmount) {\\n            paybackAmount = amount;\\n        }\\n\\n        if (paybackAmount == 0) revert ZeroAmount();\\n        IERC20(asset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            paybackAmount\\n        );\\n\\n        uint256 gasBegin = gasleft();\\n        POOL.repay(asset, paybackAmount, interestRateMode, onBehalfOf);\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.REPAY);\\n    }\\n\\n    /**\\n     * @dev Loop the deposit and borrow of an asset\\n     * @param asset to deposit\\n     * @param cashAmount cash amount for the deposit\\n     * @param borrowAmount borrow amount for the deposit\\n     **/\\n    function leverageDeposit(\\n        address asset,\\n        uint256 cashAmount,\\n        uint256 borrowAmount\\n    ) external payable nonReentrant {\\n        if (borrowAmount == 0) revert ZeroAmount();\\n\\n        if (asset == address(0)) {\\n            if (cashAmount != msg.value) revert InvalidMsgValue();\\n            WETH.deposit{value: cashAmount}();\\n            asset = address(WETH);\\n        } else {\\n            if (msg.value != 0) revert InvalidMsgValue();\\n            if (cashAmount > 0) {\\n                IERC20(asset).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    cashAmount\\n                );\\n            }\\n        }\\n\\n        uint256 gasBegin = gasleft();\\n        bytes memory params = abi.encode(\\n            OperationType.Leverage,\\n            msg.sender,\\n            cashAmount,\\n            borrowAmount\\n        );\\n        POOL.flashLoanSimple(\\n            address(this),\\n            asset,\\n            borrowAmount,\\n            params,\\n            referralCode\\n        );\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(gasBegin - gasEnd, IGasRefund.RefundType.LEVERAGEDEPOSIT);\\n\\n        emit LeverageDeposit(msg.sender, asset, cashAmount, borrowAmount);\\n    }\\n\\n    struct MultiplierLocalVars {\\n        address user;\\n        uint256 cashAmount;\\n        uint256 borrowAmount;\\n        uint256 minDepositAmount;\\n        address[] swapPath;\\n    }\\n\\n    function multiplierDeposit(\\n        address asset,\\n        uint256 cashAmount,\\n        uint256 borrowAmount,\\n        address depositAsset,\\n        uint256 minDepositAmount,\\n        address[] calldata swapPath\\n    ) external payable nonReentrant {\\n        if (address(swapRouter) == address(0)) revert FeatureNotActive();\\n        if (asset == depositAsset) revert InvalidParam();\\n\\n        if (asset == address(0)) {\\n            if (cashAmount != msg.value) revert InvalidMsgValue();\\n            WETH.deposit{value: cashAmount}();\\n            asset = address(WETH);\\n        } else {\\n            if (msg.value != 0) revert InvalidMsgValue();\\n            if (cashAmount > 0) {\\n                IERC20(asset).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    cashAmount\\n                );\\n            }\\n        }\\n\\n        MultiplierLocalVars memory localVars;\\n        localVars.user = msg.sender;\\n        localVars.cashAmount = cashAmount;\\n        localVars.borrowAmount = borrowAmount;\\n        localVars.minDepositAmount = minDepositAmount;\\n        localVars.swapPath = swapPath;\\n\\n        uint256 gasBegin = gasleft();\\n        bytes memory params = abi.encode(OperationType.Multiplier, localVars);\\n        POOL.flashLoanSimple(\\n            address(this),\\n            asset,\\n            borrowAmount,\\n            params,\\n            referralCode\\n        );\\n        uint256 gasEnd = gasleft();\\n        _addGasRefund(\\n            gasBegin - gasEnd,\\n            IGasRefund.RefundType.MULTIPLIERDEPOSIT\\n        );\\n\\n        emit MultiplierDeposit(\\n            msg.sender,\\n            asset,\\n            cashAmount,\\n            borrowAmount,\\n            depositAsset\\n        );\\n    }\\n\\n    /// @inheritdoc IFlashLoanSimpleReceiver\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool) {\\n        OperationType operationType = abi.decode(params, (OperationType));\\n\\n        if (operationType == OperationType.Leverage) {\\n            //decode param\\n            (address user, uint256 cashAmount, uint256 borrowAmount) = abi\\n                .decode(params[32:], (address, uint256, uint256));\\n\\n            if (\\n                msg.sender != address(POOL) ||\\n                initiator != address(this) ||\\n                borrowAmount != amount\\n            ) revert InvalidFlashLoan();\\n\\n            _checkApprove(asset, address(POOL));\\n\\n            //supply asset\\n            uint256 supplyAmount = cashAmount + borrowAmount - premium;\\n            POOL.supply(asset, supplyAmount, user, referralCode);\\n\\n            //borrow asset\\n            POOL.borrow(asset, borrowAmount, 2, referralCode, user);\\n\\n            //nothing need to do for repaying flash loan since we've approved asset.\\n\\n            return true;\\n        } else if (operationType == OperationType.Multiplier) {\\n            //decode param\\n            MultiplierLocalVars memory localVars;\\n            (operationType, localVars) = abi.decode(\\n                params,\\n                (OperationType, MultiplierLocalVars)\\n            );\\n\\n            if (\\n                msg.sender != address(POOL) ||\\n                initiator != address(this) ||\\n                localVars.borrowAmount != amount\\n            ) revert InvalidFlashLoan();\\n\\n            //supply asset\\n            _checkApprove(asset, address(swapRouter));\\n            uint256 tokenInAmount = localVars.cashAmount +\\n                localVars.borrowAmount -\\n                premium;\\n            uint[] memory amounts = swapRouter.swapExactTokensForTokens(\\n                tokenInAmount,\\n                localVars.minDepositAmount,\\n                localVars.swapPath,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n            address supplyAsset = localVars.swapPath[\\n                localVars.swapPath.length - 1\\n            ];\\n            _checkApprove(supplyAsset, address(POOL));\\n            POOL.supply(\\n                supplyAsset,\\n                amounts[amounts.length - 1],\\n                localVars.user,\\n                referralCode\\n            );\\n\\n            //borrow asset\\n            POOL.borrow(\\n                asset,\\n                localVars.borrowAmount,\\n                2,\\n                referralCode,\\n                localVars.user\\n            );\\n\\n            //approve asset to repay flashloan\\n            _checkApprove(asset, address(POOL));\\n\\n            return true;\\n        }\\n\\n        //will revert in lending pool\\n        return false;\\n    }\\n\\n    /// @inheritdoc IFlashLoanSimpleReceiver\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider)\\n    {\\n        return POOL.ADDRESSES_PROVIDER();\\n    }\\n\\n    /**\\n     * @notice Rescue erc20/ETH from this contract address. Only owner can call this function\\n     * @param token The token address to be rescued\\n     * @param to The account address to receive token\\n     * @param amount The amount to be rescued\\n     **/\\n    function rescueToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (token == address(0)) {\\n            _safeTransferETH(to, amount);\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n        emit RescueToken(token, to, amount);\\n    }\\n\\n    /**\\n     * @notice Set gas refund address. Only owner can call this function\\n     * @param _gasRefund The address of user gas refund contract\\n     **/\\n    function setGasRefund(address _gasRefund) external onlyOwner {\\n        gasRefund = _gasRefund;\\n    }\\n\\n    function setSwapRouter(address _swapRouter) external onlyOwner {\\n        swapRouter = IUniswapV2Router02(_swapRouter);\\n    }\\n\\n    /**\\n     * @dev transfer ETH to an address, revert if it fails.\\n     * @param to recipient of the transfer\\n     * @param value the amount to send\\n     */\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice Approves token allowance for lending pool.\\n     * @param asset Address of the asset\\n     **/\\n    function _checkApprove(address asset, address target) internal {\\n        if (IERC20(asset).allowance(address(this), target) == 0) {\\n            IERC20(asset).safeApprove(target, type(uint256).max);\\n        }\\n    }\\n\\n    function claimRefundedGas(address recipient) external onlyOwner {\\n        address blast = POOL.BLAST();\\n        if (blast != address(0)) {\\n            IBlast(blast).claimMaxGas(address(this), recipient);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf625356c290f7307188f3e7e0e01cd4b81dd23e8516b7c9275a5a2b0c3ff0a22\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x9f865ae3d19d19b2ed680009d6a83ae7fdd80594a86fccf567523d68760a648e\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/flashloan/interfaces/IFlashLoanSimpleReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"../../interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"../../interfaces/IPool.sol\\\";\\n\\n/**\\n * @title IFlashLoanSimpleReceiver\\n * @author Aave\\n * @notice Defines the basic interface of a flashloan-receiver contract.\\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\\n */\\ninterface IFlashLoanSimpleReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed asset\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has approved the Pool to pull the total amount\\n     * @param asset The address of the flash-borrowed asset\\n     * @param amount The amount of the flash-borrowed asset\\n     * @param premium The fee of the flash-borrowed asset\\n     * @param initiator The address of the flashloan initiator\\n     * @param params The byte-encoded params passed when initiating the flashloan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address asset,\\n        uint256 amount,\\n        uint256 premium,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    function POOL() external view returns (IPool);\\n}\\n\",\"keccak256\":\"0xaf9f8395570142aaf289374d1bcafb6cd66f86d14d97e68b06d0d4034964eea6\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n */\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The scaled amount being transferred\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event BalanceTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Mints `amount` aTokens to `user`\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted aTokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address caller,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @dev In some instances, the mint event could be emitted from a burn transaction\\n     * if the amount to burn is less than the interest that the user accrued\\n     * @param from The address from which the aTokens will be burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The next liquidity index of the reserve\\n     */\\n    function burn(\\n        address from,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @notice Mints aTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n     * @param from The address getting liquidated, current owner of the aTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     */\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the underlying asset to `target`.\\n     * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n     * @param target The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     */\\n    function transferUnderlyingTo(address target, uint256 amount) external;\\n\\n    /**\\n     * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n     * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n     * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n     * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n     * @param user The user executing the repayment\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed\\n     * @param amount The amount getting repaid\\n     */\\n    function handleRepayment(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @return The address of the underlying asset\\n     */\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n     * @return Address of the Aave treasury\\n     */\\n    function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Get the domain separator for the token\\n     * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n     * @return The domain separator of the token at current chain\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the nonce for owner.\\n     * @param owner The address of the owner\\n     * @return The nonce of the owner\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    function configureClaimableYield() external;\\n\\n    /**\\n     * @notice Configure blast point operator\\n     * @param blastPoints The address of BlastPoints\\n     * @param pointsOperator The address of the point operator\\n     */\\n    function configurePointOperator(\\n        address blastPoints,\\n        address pointsOperator\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4688441eec4185f643dcf26a17503888fdf1aa8e5d3da0e3a92a5f8a4cf9b4ce\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     */\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc151038fc0fadac268bf9e71ed67d04c6217169f7c18edfea38f0f78edf3dbfd\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n */\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals The decimals of the underlying\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the aToken\\n     * @param pool The pool contract that is initializing this contract\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x83f88dddf1c55903a757d2c4d8d1e8d8c2f99ca2e59ecc974a5a90e1ec946cf1\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns the BLAST connected to this contract\\n     * @return The address of the BLAST\\n     */\\n    function BLAST() external view returns (address);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf3f38ee4e51d363fb78330a99bdc6216f3ec2ac7c67ee3ee77d21fe8c8051ee\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x5ed67f81bd2a927b7337c4235c183e541962a6f4d9d582bb74b45908492cc4f4\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted tokens\\n     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Mint(\\n        address indexed caller,\\n        address indexed onBehalfOf,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted after the burn action\\n     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n     * @param from The address from which the tokens will be burned\\n     * @param target The address that will receive the underlying, if any\\n     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Returns the scaled balance of the user.\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n     * at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     */\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled total supply\\n     */\\n    function getScaledUserBalanceAndSupply(\\n        address user\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns last index interest was accrued to the user's balance\\n     * @param user The address of the user\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\n     */\\n    function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xefec728d1fe7d2384e5faf852bad7c5ff6d59d1031900384e1f9c175edff28e4\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/misc/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xda0e7531cb092f05df4778253c18151794ab8cfc906a772e53629c7b28888cda\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xb93629c45e8479d3297ce5adf5efb5e8bddedf4caf5c66c3459d595004d56088\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/uniswapv2/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external view returns (address);\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xc29ff8908a2dd90aac54138ad0d53a519a5f5891215775eddaab1aa43033d79e\",\"license\":\"BUSL-1.1\"},\"contracts/dependencies/uniswapv2/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbdfa1a7eec93f6c8368c3f5b5028259266b6c1d6d599ac2315ff2fb7f7ad75df\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE\\n}\\n\\ninterface IBlast {\\n    // configure\\n    function configureContract(\\n        address contractAddress,\\n        YieldMode _yield,\\n        GasMode gasMode,\\n        address governor\\n    ) external;\\n    function configure(\\n        YieldMode _yield,\\n        GasMode gasMode,\\n        address governor\\n    ) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(\\n        address _newGovernor,\\n        address contractAddress\\n    ) external;\\n\\n    // claim yield\\n    function claimYield(\\n        address contractAddress,\\n        address recipientOfYield,\\n        uint256 amount\\n    ) external returns (uint256);\\n    function claimAllYield(\\n        address contractAddress,\\n        address recipientOfYield\\n    ) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n    function claimGasAtMinClaimRate(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 minClaimRateBips\\n    ) external returns (uint256);\\n    function claimMaxGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n    function claimGas(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 gasToClaim,\\n        uint256 gasSecondsToConsume\\n    ) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(\\n        address contractAddress\\n    ) external view returns (uint256);\\n    function readYieldConfiguration(\\n        address contractAddress\\n    ) external view returns (uint8);\\n    function readGasParams(\\n        address contractAddress\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 etherSeconds,\\n            uint256 etherBalance,\\n            uint256 lastUpdated,\\n            GasMode\\n        );\\n}\\n\",\"keccak256\":\"0x7fd2e575d0ee5ecc7fc7be8a91f42245c3686cfe2330cddea6f156aac0e639f2\",\"license\":\"MIT\"},\"contracts/interfaces/IGasRefund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IGasRefund {\\n    enum RefundType {\\n        SUPPLY,\\n        WITHDRAW,\\n        BORROW,\\n        REPAY,\\n        LEVERAGEDEPOSIT,\\n        MULTIPLIERDEPOSIT\\n    }\\n\\n    function addGasRefund(\\n        address user,\\n        uint256 amount,\\n        RefundType refundType\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1f62917140a3bf9cc3819d27e3f097d26f9b4145c9fd891585e2057214f78\",\"license\":\"MIT\"},\"contracts/periphery-v3/contracts/libraries/DataTypesHelper.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"../../../core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {DataTypes} from \\\"../../../core-v3/contracts/protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title DataTypesHelper\\n * @author Aave\\n * @dev Helper library to track user current debt balance, used by WrappedTokenGatewayV3\\n */\\nlibrary DataTypesHelper {\\n    /**\\n     * @notice Fetches the user current stable and variable debt balances\\n     * @param user The user address\\n     * @param reserve The reserve data object\\n     * @return The stable debt balance\\n     * @return The variable debt balance\\n     **/\\n    function getUserCurrentDebt(\\n        address user,\\n        DataTypes.ReserveData memory reserve\\n    ) internal view returns (uint256, uint256) {\\n        return (\\n            IERC20(reserve.stableDebtTokenAddress).balanceOf(user),\\n            IERC20(reserve.variableDebtTokenAddress).balanceOf(user)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7a1c6ce352d638e9936d5d2662b182864e46639a1868c8fe4e6a5c517f55415b\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200453638038062004536833981016040819052620000349162000260565b6200003f33620001f3565b600180556001600160a01b0382166200006b57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0381166200009357604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03828116608081905290821660a081905260405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af1158015620000f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000118919062000298565b5060006080516001600160a01b03166397d757766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200015c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001829190620002c3565b90506001600160a01b03811615620001ea57806001600160a01b0316634e606c476040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620001d057600080fd5b505af1158015620001e5573d6000803e3d6000fd5b505050505b505050620002e1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200025b57600080fd5b919050565b600080604083850312156200027457600080fd5b6200027f8362000243565b91506200028f6020840162000243565b90509250929050565b600060208284031215620002ab57600080fd5b81518015158114620002bc57600080fd5b9392505050565b600060208284031215620002d657600080fd5b620002bc8262000243565b60805160a05161411062000426600039600081816101a10152818161041a01528181610f3601528181610fb7015281816113b70152818161147601528181611580015281816117be015281816118ae01528181611cdb01528181611dc001528181611eef01528181611f700152818161274601528181612880015261293f0152600081816103a8015281816105200152818161062001528181610730015281816107bb015281816108540152818161091201528181610a0901528181610bdf01528181610c0501528181610d0401528181610de10152818161115701528181611266015281816114b6015281816115ab015281816117f6015281816119d601528181611c0301528181611d210152818161207f015281816121de015281816122630152818161237a015281816124ec01528181612779015261297f01526141106000f3fe6080604052600436106101845760003560e01c8063715018a6116100d6578063c31c9c071161007f578063e5711e8b11610059578063e5711e8b146104c9578063f2fde38b146104e9578063f538ba511461050957600080fd5b8063c31c9c071461045c578063c44a7be914610489578063d4ac1926146104a957600080fd5b8063a7fb3509116100b0578063a7fb3509146103f5578063ad5c464814610408578063b9739e871461043c57600080fd5b8063715018a6146103815780637535d246146103965780638da5cb5b146103ca57600080fd5b80632d2da806116101385780635bc758e2116101125780635bc758e2146103145780635fc3ea0b146103415780636fab3b731461036157600080fd5b80632d2da806146102c157806336118b52146102d457806341273657146102f457600080fd5b80631b11d0ff116101695780631b11d0ff1461025e5780631c95d9331461028e5780632cca1cdf146102a157600080fd5b80630542975c146101ff5780631a2467a51461023e57600080fd5b366101fa573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101f8576040517fcb263c3f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b34801561020b57600080fd5b5061021461051c565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561024a57600080fd5b506101f8610259366004613526565b6105b2565b34801561026a57600080fd5b5061027e61027936600461355b565b6106c8565b6040519015158152602001610235565b6101f861029c366004613605565b610e23565b3480156102ad57600080fd5b506101f86102bc3660046136bd565b61125a565b6101f86102cf3660046136bd565b6113ad565b3480156102e057600080fd5b506101f86102ef3660046136e1565b61153b565b34801561030057600080fd5b506101f861030f3660046136bd565b611937565b34801561032057600080fd5b506003546102149073ffffffffffffffffffffffffffffffffffffffff1681565b34801561034d57600080fd5b506101f861035c366004613711565b611986565b34801561036d57600080fd5b506101f861037c366004613753565b611c93565b34801561038d57600080fd5b506101f8611e46565b3480156103a257600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610214565b6101f8610403366004613526565b611e5a565b34801561041457600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b34801561044857600080fd5b506101f8610457366004613711565b612171565b34801561046857600080fd5b506002546102149073ffffffffffffffffffffffffffffffffffffffff1681565b34801561049557600080fd5b506101f86104a43660046136bd565b6122d3565b3480156104b557600080fd5b506101f86104c4366004613775565b612322565b3480156104d557600080fd5b506101f86104e43660046137bf565b612589565b3480156104f557600080fd5b506101f86105043660046136bd565b612648565b6101f8610517366004613800565b612701565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630542975c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad919061382e565b905090565b6105ba612a1c565b60005a6040517fa415bcad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820186905260448201859052600060648301523360848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a415bcad9060a401600060405180830381600087803b15801561066657600080fd5b505af115801561067a573d6000803e3d6000fd5b5050505060005a9050610697610690828461387a565b6002612a90565b6106b873ffffffffffffffffffffffffffffffffffffffff86163386612b43565b50506106c360018055565b505050565b6000806106d7838501856138a5565b905060008160018111156106ed576106ed6138c0565b141561097e5760008080610704866020818a6138ef565b8101906107119190613526565b919450925090503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141580610773575073ffffffffffffffffffffffffffffffffffffffff88163014155b8061077e5750898114155b156107b5576040517fbafe1c5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107df8b7f0000000000000000000000000000000000000000000000000000000000000000612c17565b6000896107ec8385613919565b6107f6919061387a565b6040517f617ba03700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e81166004830152602482018390528681166044830152600060648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063617ba03790608401600060405180830381600087803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b50506040517fa415bcad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8f8116600483015260248201869052600260448301526000606483015287811660848301527f000000000000000000000000000000000000000000000000000000000000000016925063a415bcad915060a401600060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b50505050600195505050505050610e19565b6001816001811115610992576109926138c0565b1415610e13576109e06040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001606081525090565b6109ec84860186613a20565b90925090503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141580610a4c575073ffffffffffffffffffffffffffffffffffffffff86163014155b80610a5b575087816040015114155b15610a92576040517fbafe1c5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610ab6908a9073ffffffffffffffffffffffffffffffffffffffff16612c17565b60008782604001518360200151610acd9190613919565b610ad7919061387a565b600254606084015160808501516040517f38ed173900000000000000000000000000000000000000000000000000000000815293945060009373ffffffffffffffffffffffffffffffffffffffff909316926338ed173992610b4192879230904290600401613b37565b6000604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ba69190810190613bc2565b60808401518051919250600091610bbf9060019061387a565b81518110610bcf57610bcf613c48565b60200260200101519050610c03817f0000000000000000000000000000000000000000000000000000000000000000612c17565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663617ba037828460018651610c4f919061387a565b81518110610c5f57610c5f613c48565b602090810291909101015187516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925291909116604482015260006064820152608401600060405180830381600087803b158015610cea57600080fd5b505af1158015610cfe573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a415bcad8d86604001516002600089600001516040518663ffffffff1660e01b8152600401610da995949392919073ffffffffffffffffffffffffffffffffffffffff95861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b600060405180830381600087803b158015610dc357600080fd5b505af1158015610dd7573d6000803e3d6000fd5b50505050610e058c7f0000000000000000000000000000000000000000000000000000000000000000612c17565b600195505050505050610e19565b60009150505b9695505050505050565b610e2b612a1c565b60025473ffffffffffffffffffffffffffffffffffffffff16610e7a576040517ff3f0984900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610ee0576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716610fdd57348614610f34576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f9c57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b50505050507f0000000000000000000000000000000000000000000000000000000000000000965061103d565b3415611015576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b851561103d5761103d73ffffffffffffffffffffffffffffffffffffffff8816333089612cf2565b6110856040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001606081525090565b3381526020808201889052604080830188905260608301869052805184830281810184019092528481529185918591829190850190849080828437600092018290525060808601949094525050505a905060006001836040516020016110ec929190613c8b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f42b0b77c000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906342b0b77c906111959030908e908d908790600090600401613da6565b600060405180830381600087803b1580156111af57600080fd5b505af11580156111c3573d6000803e3d6000fd5b5050505060005a90506111e06111d9828561387a565b6005612a90565b6040805133815273ffffffffffffffffffffffffffffffffffffffff8d811660208301528183018d9052606082018c90528a16608082015290517f557ed241a95c9fc974f8ca0089a9ff212637a88579332793e60c15364dff525c9181900360a00190a15050505061125160018055565b50505050505050565b611262612d50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166397d757766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f3919061382e565b905073ffffffffffffffffffffffffffffffffffffffff8116156113a9576040517f662aa11d00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015282169063662aa11d906044016020604051808303816000875af1158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190613e06565b5050565b6113b5612a1c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561141d57600080fd5b505af1158015611431573d6000803e3d6000fd5b505050505060005a6040517fe8eda9df00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523460248301528481166044830152600060648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e8eda9df90608401600060405180830381600087803b1580156114fc57600080fd5b505af1158015611510573d6000803e3d6000fd5b5050505060005a905061152d611526828461387a565b6000612a90565b505061153860018055565b50565b611543612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190613ea8565b61010001516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190613e06565b9050837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114156116e05750805b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8416906323b872dd906064016020604051808303816000875af1158015611759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177d9190613fcb565b5060005a6040517f69328dec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590523060448301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec906064016020604051808303816000875af1158015611841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118659190613e06565b5060005a905061187f611878828461387a565b6001612a90565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561190757600080fd5b505af115801561191b573d6000803e3d6000fd5b505050506119298684612dd1565b50505050506113a960018055565b61193f612d50565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61198e612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190613ea8565b61010001516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190613e06565b9050837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811415611b0b5750805b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8416906323b872dd906064016020604051808303816000875af1158015611b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba89190613fcb565b5060005a6040517f69328dec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820185905287811660448301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec906064016020604051808303816000875af1158015611c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c729190613e06565b5060005a9050611c85611878828461387a565b50505050506106c360018055565b611c9b612a1c565b60005a6040517fa415bcad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905260448201859052600060648301523360848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a415bcad9060a401600060405180830381600087803b158015611d6757600080fd5b505af1158015611d7b573d6000803e3d6000fd5b5050505060005a9050611d91610690828461387a565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b158015611e1957600080fd5b505af1158015611e2d573d6000803e3d6000fd5b50505050611e3b3385612dd1565b50506113a960018055565b611e4e612d50565b611e586000612eb5565b565b611e62612a1c565b80611e99576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316611f9657348214611eed576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f5557600080fd5b505af1158015611f69573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000009250611ff6565b3415611fce576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8115611ff657611ff673ffffffffffffffffffffffffffffffffffffffff8416333085612cf2565b60005a90506000803385856040516020016120149493929190613fed565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f42b0b77c000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906342b0b77c906120bd903090899088908790600090600401613da6565b600060405180830381600087803b1580156120d757600080fd5b505af11580156120eb573d6000803e3d6000fd5b5050505060005a9050612108612101828561387a565b6004612a90565b6040805133815273ffffffffffffffffffffffffffffffffffffffff88166020820152908101869052606081018590527f3844eeb24e2d31fa648194b139814a3630ef83d96c0f20200dd364ae344a62609060800160405180910390a15050506106c360018055565b612179612a1c565b816121b0576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81156121d8576121d873ffffffffffffffffffffffffffffffffffffffff8416333085612cf2565b612202837f0000000000000000000000000000000000000000000000000000000000000000612c17565b60005a6040517f617ba03700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690528481166044830152600060648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063617ba03790608401600060405180830381600087803b1580156122a957600080fd5b505af11580156122bd573d6000803e3d6000fd5b5050505060005a90506106b8611526828461387a565b6122db612d50565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61232a612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015260009182916123ec9185917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024015b6101e060405180830381865afa1580156123c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e79190613ea8565b612f2a565b909250905060006001856002811115612407576124076138c0565b6002811115612418576124186138c0565b146124235781612425565b825b9050808610156124325750845b80612469576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61248b73ffffffffffffffffffffffffffffffffffffffff8816333084612cf2565b60005a6040517f573ade8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018590526044820189905287811660648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063573ade81906084016020604051808303816000875af1158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b9190613e06565b5060005a905061257561256e828461387a565b6003612a90565b505050505061258360018055565b50505050565b612591612d50565b73ffffffffffffffffffffffffffffffffffffffff83166125bb576125b68282612dd1565b6125dc565b6125dc73ffffffffffffffffffffffffffffffffffffffff84168383612b43565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167faabf44ab9d5bef08d1b60f287a337f0d11a248e49741ad189b429e47e98ba9108360405161263b91815260200190565b60405180910390a3505050565b612650612d50565b73ffffffffffffffffffffffffffffffffffffffff81166126f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61153881612eb5565b612709612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182916127a89185917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016123a5565b9092509050600060018560028111156127c3576127c36138c0565b60028111156127d4576127d46138c0565b146127df57816127e1565b825b9050808610156127ee5750845b8034101561287e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f6d73672e76616c7565206973206c657373207468616e2072657061796d656e7460448201527f20616d6f756e740000000000000000000000000000000000000000000000000060648201526084016126ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128e657600080fd5b505af11580156128fa573d6000803e3d6000fd5b505050505060005a6040517f573ade8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523460248301526044820189905287811660648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063573ade81906084016020604051808303816000875af11580156129ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ee9190613e06565b5060005a9050612a0161256e828461387a565b82341115611c8557611c8533612a17853461387a565b612dd1565b60026001541415612a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016126ef565b6002600155565b60035473ffffffffffffffffffffffffffffffffffffffff16156113a9576000612aba3a8461402c565b6003546040517fcff29e6700000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063cff29e6790612b1590339085908790600401614069565b600060405180830381600087803b158015612b2f57600080fd5b505af1158015611251573d6000803e3d6000fd5b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106c39084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613067565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015283169063dd62ed3e90604401602060405180830381865afa158015612c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cad9190613e06565b6113a9576113a973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613176565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526125839085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612b95565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016126ef565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051612e0891906140ab565b60006040518083038185875af1925050503d8060008114612e45576040519150601f19603f3d011682016040523d82523d6000602084013e612e4a565b606091505b50509050806106c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016126ef565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6101208101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009283929116906370a0823190602401602060405180830381865afa158015612fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc59190613e06565b6101408401516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a0823190602401602060405180830381865afa158015613038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305c9190613e06565b915091509250929050565b60006130c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132f89092919063ffffffff16565b90508051600014806130ea5750808060200190518101906130ea9190613fcb565b6106c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016126ef565b80158061321657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156131f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132149190613e06565b155b6132a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016126ef565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106c39084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612b95565b6060613307848460008561330f565b949350505050565b6060824710156133a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016126ef565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516133ca91906140ab565b60006040518083038185875af1925050503d8060008114613407576040519150601f19603f3d011682016040523d82523d6000602084013e61340c565b606091505b509150915061341d87838387613428565b979650505050505050565b606083156134bb5782516134b45773ffffffffffffffffffffffffffffffffffffffff85163b6134b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016126ef565b5081613307565b61330783838151156134d05781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ef91906140c7565b73ffffffffffffffffffffffffffffffffffffffff8116811461153857600080fd5b60008060006060848603121561353b57600080fd5b833561354681613504565b95602085013595506040909401359392505050565b60008060008060008060a0878903121561357457600080fd5b863561357f81613504565b95506020870135945060408701359350606087013561359d81613504565b9250608087013567ffffffffffffffff808211156135ba57600080fd5b818901915089601f8301126135ce57600080fd5b8135818111156135dd57600080fd5b8a60208285010111156135ef57600080fd5b6020830194508093505050509295509295509295565b600080600080600080600060c0888a03121561362057600080fd5b873561362b81613504565b96506020880135955060408801359450606088013561364981613504565b93506080880135925060a088013567ffffffffffffffff8082111561366d57600080fd5b818a0191508a601f83011261368157600080fd5b81358181111561369057600080fd5b8b60208260051b85010111156136a557600080fd5b60208301945080935050505092959891949750929550565b6000602082840312156136cf57600080fd5b81356136da81613504565b9392505050565b600080604083850312156136f457600080fd5b82359150602083013561370681613504565b809150509250929050565b60008060006060848603121561372657600080fd5b833561373181613504565b925060208401359150604084013561374881613504565b809150509250925092565b6000806040838503121561376657600080fd5b50508035926020909101359150565b6000806000806080858703121561378b57600080fd5b843561379681613504565b9350602085013592506040850135915060608501356137b481613504565b939692955090935050565b6000806000606084860312156137d457600080fd5b83356137df81613504565b925060208401356137ef81613504565b929592945050506040919091013590565b60008060006060848603121561381557600080fd5b8335925060208401359150604084013561374881613504565b60006020828403121561384057600080fd5b81516136da81613504565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561388c5761388c61384b565b500390565b8035600281106138a057600080fd5b919050565b6000602082840312156138b757600080fd5b6136da82613891565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080858511156138ff57600080fd5b8386111561390c57600080fd5b5050820193919092039150565b6000821982111561392c5761392c61384b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561398357613983613931565b60405290565b6040516101e0810167ffffffffffffffff8111828210171561398357613983613931565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156139f4576139f4613931565b604052919050565b600067ffffffffffffffff821115613a1657613a16613931565b5060051b60200190565b60008060408385031215613a3357600080fd5b613a3c83613891565b915060208084013567ffffffffffffffff80821115613a5a57600080fd5b9085019060a08288031215613a6e57600080fd5b613a76613960565b8235613a8181613504565b8082525083830135848201526040830135604082015260608301356060820152608083013582811115613ab357600080fd5b80840193505087601f840112613ac857600080fd5b82359150613add613ad8836139fc565b6139ad565b82815260059290921b83018401918481019089841115613afc57600080fd5b938501935b83851015613b23578435613b1481613504565b82529385019390850190613b01565b608083015250949794965093945050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015613b9457845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613b62565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60006020808385031215613bd557600080fd5b825167ffffffffffffffff811115613bec57600080fd5b8301601f81018513613bfd57600080fd5b8051613c0b613ad8826139fc565b81815260059190911b82018301908381019087831115613c2a57600080fd5b928401925b8284101561341d57835182529284019290840190613c2f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60028110613c8757613c876138c0565b9052565b613c958184613c77565b6000602060408184015260e0830173ffffffffffffffffffffffffffffffffffffffff80865116604086015282860151606086015260408601516080860152606086015160a0860152608086015160a060c0870152828151808552610100880191508583019450600092505b80831015613d2357845184168252938501936001929092019190850190613d01565b5098975050505050505050565b60005b83811015613d4b578181015183820152602001613d33565b838111156125835750506000910152565b60008151808452613d74816020860160208601613d30565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260a06060830152613de560a0830185613d5c565b905061ffff831660808301529695505050505050565b80516138a081613504565b600060208284031215613e1857600080fd5b5051919050565b600060208284031215613e3157600080fd5b6040516020810181811067ffffffffffffffff82111715613e5457613e54613931565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff811681146138a057600080fd5b805164ffffffffff811681146138a057600080fd5b805161ffff811681146138a057600080fd5b60006101e08284031215613ebb57600080fd5b613ec3613989565b613ecd8484613e1f565b8152613edb60208401613e61565b6020820152613eec60408401613e61565b6040820152613efd60608401613e61565b6060820152613f0e60808401613e61565b6080820152613f1f60a08401613e61565b60a0820152613f3060c08401613e81565b60c0820152613f4160e08401613e96565b60e0820152610100613f54818501613dfb565b90820152610120613f66848201613dfb565b90820152610140613f78848201613dfb565b90820152610160613f8a848201613dfb565b90820152610180613f9c848201613e61565b908201526101a0613fae848201613e61565b908201526101c0613fc0848201613e61565b908201529392505050565b600060208284031215613fdd57600080fd5b815180151581146136da57600080fd5b60808101613ffb8287613c77565b73ffffffffffffffffffffffffffffffffffffffff8516602083015283604083015282606083015295945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156140645761406461384b565b500290565b73ffffffffffffffffffffffffffffffffffffffff8416815260208101839052606081016006831061409d5761409d6138c0565b826040830152949350505050565b600082516140bd818460208701613d30565b9190910192915050565b6020815260006136da6020830184613d5c56fea2646970667358221220cd410000fc111763ce4e0d83f2c66dc239d592df1a1125327dab6df1a1e00f8864736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101845760003560e01c8063715018a6116100d6578063c31c9c071161007f578063e5711e8b11610059578063e5711e8b146104c9578063f2fde38b146104e9578063f538ba511461050957600080fd5b8063c31c9c071461045c578063c44a7be914610489578063d4ac1926146104a957600080fd5b8063a7fb3509116100b0578063a7fb3509146103f5578063ad5c464814610408578063b9739e871461043c57600080fd5b8063715018a6146103815780637535d246146103965780638da5cb5b146103ca57600080fd5b80632d2da806116101385780635bc758e2116101125780635bc758e2146103145780635fc3ea0b146103415780636fab3b731461036157600080fd5b80632d2da806146102c157806336118b52146102d457806341273657146102f457600080fd5b80631b11d0ff116101695780631b11d0ff1461025e5780631c95d9331461028e5780632cca1cdf146102a157600080fd5b80630542975c146101ff5780631a2467a51461023e57600080fd5b366101fa573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101f8576040517fcb263c3f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b34801561020b57600080fd5b5061021461051c565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561024a57600080fd5b506101f8610259366004613526565b6105b2565b34801561026a57600080fd5b5061027e61027936600461355b565b6106c8565b6040519015158152602001610235565b6101f861029c366004613605565b610e23565b3480156102ad57600080fd5b506101f86102bc3660046136bd565b61125a565b6101f86102cf3660046136bd565b6113ad565b3480156102e057600080fd5b506101f86102ef3660046136e1565b61153b565b34801561030057600080fd5b506101f861030f3660046136bd565b611937565b34801561032057600080fd5b506003546102149073ffffffffffffffffffffffffffffffffffffffff1681565b34801561034d57600080fd5b506101f861035c366004613711565b611986565b34801561036d57600080fd5b506101f861037c366004613753565b611c93565b34801561038d57600080fd5b506101f8611e46565b3480156103a257600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b3480156103d657600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff16610214565b6101f8610403366004613526565b611e5a565b34801561041457600080fd5b506102147f000000000000000000000000000000000000000000000000000000000000000081565b34801561044857600080fd5b506101f8610457366004613711565b612171565b34801561046857600080fd5b506002546102149073ffffffffffffffffffffffffffffffffffffffff1681565b34801561049557600080fd5b506101f86104a43660046136bd565b6122d3565b3480156104b557600080fd5b506101f86104c4366004613775565b612322565b3480156104d557600080fd5b506101f86104e43660046137bf565b612589565b3480156104f557600080fd5b506101f86105043660046136bd565b612648565b6101f8610517366004613800565b612701565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630542975c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ad919061382e565b905090565b6105ba612a1c565b60005a6040517fa415bcad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820186905260448201859052600060648301523360848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a415bcad9060a401600060405180830381600087803b15801561066657600080fd5b505af115801561067a573d6000803e3d6000fd5b5050505060005a9050610697610690828461387a565b6002612a90565b6106b873ffffffffffffffffffffffffffffffffffffffff86163386612b43565b50506106c360018055565b505050565b6000806106d7838501856138a5565b905060008160018111156106ed576106ed6138c0565b141561097e5760008080610704866020818a6138ef565b8101906107119190613526565b919450925090503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141580610773575073ffffffffffffffffffffffffffffffffffffffff88163014155b8061077e5750898114155b156107b5576040517fbafe1c5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107df8b7f0000000000000000000000000000000000000000000000000000000000000000612c17565b6000896107ec8385613919565b6107f6919061387a565b6040517f617ba03700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8e81166004830152602482018390528681166044830152600060648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063617ba03790608401600060405180830381600087803b15801561089a57600080fd5b505af11580156108ae573d6000803e3d6000fd5b50506040517fa415bcad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8f8116600483015260248201869052600260448301526000606483015287811660848301527f000000000000000000000000000000000000000000000000000000000000000016925063a415bcad915060a401600060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b50505050600195505050505050610e19565b6001816001811115610992576109926138c0565b1415610e13576109e06040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001606081525090565b6109ec84860186613a20565b90925090503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016141580610a4c575073ffffffffffffffffffffffffffffffffffffffff86163014155b80610a5b575087816040015114155b15610a92576040517fbafe1c5300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610ab6908a9073ffffffffffffffffffffffffffffffffffffffff16612c17565b60008782604001518360200151610acd9190613919565b610ad7919061387a565b600254606084015160808501516040517f38ed173900000000000000000000000000000000000000000000000000000000815293945060009373ffffffffffffffffffffffffffffffffffffffff909316926338ed173992610b4192879230904290600401613b37565b6000604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610ba69190810190613bc2565b60808401518051919250600091610bbf9060019061387a565b81518110610bcf57610bcf613c48565b60200260200101519050610c03817f0000000000000000000000000000000000000000000000000000000000000000612c17565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663617ba037828460018651610c4f919061387a565b81518110610c5f57610c5f613c48565b602090810291909101015187516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff9384166004820152602481019290925291909116604482015260006064820152608401600060405180830381600087803b158015610cea57600080fd5b505af1158015610cfe573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a415bcad8d86604001516002600089600001516040518663ffffffff1660e01b8152600401610da995949392919073ffffffffffffffffffffffffffffffffffffffff95861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b600060405180830381600087803b158015610dc357600080fd5b505af1158015610dd7573d6000803e3d6000fd5b50505050610e058c7f0000000000000000000000000000000000000000000000000000000000000000612c17565b600195505050505050610e19565b60009150505b9695505050505050565b610e2b612a1c565b60025473ffffffffffffffffffffffffffffffffffffffff16610e7a576040517ff3f0984900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610ee0576040517fd252903400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716610fdd57348614610f34576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f9c57600080fd5b505af1158015610fb0573d6000803e3d6000fd5b50505050507f0000000000000000000000000000000000000000000000000000000000000000965061103d565b3415611015576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b851561103d5761103d73ffffffffffffffffffffffffffffffffffffffff8816333089612cf2565b6110856040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001606081525090565b3381526020808201889052604080830188905260608301869052805184830281810184019092528481529185918591829190850190849080828437600092018290525060808601949094525050505a905060006001836040516020016110ec929190613c8b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f42b0b77c000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906342b0b77c906111959030908e908d908790600090600401613da6565b600060405180830381600087803b1580156111af57600080fd5b505af11580156111c3573d6000803e3d6000fd5b5050505060005a90506111e06111d9828561387a565b6005612a90565b6040805133815273ffffffffffffffffffffffffffffffffffffffff8d811660208301528183018d9052606082018c90528a16608082015290517f557ed241a95c9fc974f8ca0089a9ff212637a88579332793e60c15364dff525c9181900360a00190a15050505061125160018055565b50505050505050565b611262612d50565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166397d757766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f3919061382e565b905073ffffffffffffffffffffffffffffffffffffffff8116156113a9576040517f662aa11d00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015282169063662aa11d906044016020604051808303816000875af1158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190613e06565b5050565b6113b5612a1c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561141d57600080fd5b505af1158015611431573d6000803e3d6000fd5b505050505060005a6040517fe8eda9df00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523460248301528481166044830152600060648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e8eda9df90608401600060405180830381600087803b1580156114fc57600080fd5b505af1158015611510573d6000803e3d6000fd5b5050505060005a905061152d611526828461387a565b6000612a90565b505061153860018055565b50565b611543612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190613ea8565b61010001516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa15801561168e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b29190613e06565b9050837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114156116e05750805b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8416906323b872dd906064016020604051808303816000875af1158015611759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177d9190613fcb565b5060005a6040517f69328dec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590523060448301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec906064016020604051808303816000875af1158015611841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118659190613e06565b5060005a905061187f611878828461387a565b6001612a90565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561190757600080fd5b505af115801561191b573d6000803e3d6000fd5b505050506119298684612dd1565b50505050506113a960018055565b61193f612d50565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61198e612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190613ea8565b61010001516040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190613e06565b9050837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811415611b0b5750805b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8416906323b872dd906064016020604051808303816000875af1158015611b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba89190613fcb565b5060005a6040517f69328dec00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820185905287811660448301529192507f0000000000000000000000000000000000000000000000000000000000000000909116906369328dec906064016020604051808303816000875af1158015611c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c729190613e06565b5060005a9050611c85611878828461387a565b50505050506106c360018055565b611c9b612a1c565b60005a6040517fa415bcad00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820186905260448201859052600060648301523360848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a415bcad9060a401600060405180830381600087803b158015611d6757600080fd5b505af1158015611d7b573d6000803e3d6000fd5b5050505060005a9050611d91610690828461387a565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b158015611e1957600080fd5b505af1158015611e2d573d6000803e3d6000fd5b50505050611e3b3385612dd1565b50506113a960018055565b611e4e612d50565b611e586000612eb5565b565b611e62612a1c565b80611e99576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316611f9657348214611eed576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611f5557600080fd5b505af1158015611f69573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000009250611ff6565b3415611fce576040517f1841b4e100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8115611ff657611ff673ffffffffffffffffffffffffffffffffffffffff8416333085612cf2565b60005a90506000803385856040516020016120149493929190613fed565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f42b0b77c000000000000000000000000000000000000000000000000000000008252915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906342b0b77c906120bd903090899088908790600090600401613da6565b600060405180830381600087803b1580156120d757600080fd5b505af11580156120eb573d6000803e3d6000fd5b5050505060005a9050612108612101828561387a565b6004612a90565b6040805133815273ffffffffffffffffffffffffffffffffffffffff88166020820152908101869052606081018590527f3844eeb24e2d31fa648194b139814a3630ef83d96c0f20200dd364ae344a62609060800160405180910390a15050506106c360018055565b612179612a1c565b816121b0576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81156121d8576121d873ffffffffffffffffffffffffffffffffffffffff8416333085612cf2565b612202837f0000000000000000000000000000000000000000000000000000000000000000612c17565b60005a6040517f617ba03700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690528481166044830152600060648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063617ba03790608401600060405180830381600087803b1580156122a957600080fd5b505af11580156122bd573d6000803e3d6000fd5b5050505060005a90506106b8611526828461387a565b6122db612d50565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61232a612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015260009182916123ec9185917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024015b6101e060405180830381865afa1580156123c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e79190613ea8565b612f2a565b909250905060006001856002811115612407576124076138c0565b6002811115612418576124186138c0565b146124235781612425565b825b9050808610156124325750845b80612469576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61248b73ffffffffffffffffffffffffffffffffffffffff8816333084612cf2565b60005a6040517f573ade8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018590526044820189905287811660648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063573ade81906084016020604051808303816000875af1158015612537573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255b9190613e06565b5060005a905061257561256e828461387a565b6003612a90565b505050505061258360018055565b50505050565b612591612d50565b73ffffffffffffffffffffffffffffffffffffffff83166125bb576125b68282612dd1565b6125dc565b6125dc73ffffffffffffffffffffffffffffffffffffffff84168383612b43565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167faabf44ab9d5bef08d1b60f287a337f0d11a248e49741ad189b429e47e98ba9108360405161263b91815260200190565b60405180910390a3505050565b612650612d50565b73ffffffffffffffffffffffffffffffffffffffff81166126f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61153881612eb5565b612709612a1c565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000008116600483015260009182916127a89185917f000000000000000000000000000000000000000000000000000000000000000016906335ea6a75906024016123a5565b9092509050600060018560028111156127c3576127c36138c0565b60028111156127d4576127d46138c0565b146127df57816127e1565b825b9050808610156127ee5750845b8034101561287e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f6d73672e76616c7565206973206c657373207468616e2072657061796d656e7460448201527f20616d6f756e740000000000000000000000000000000000000000000000000060648201526084016126ef565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156128e657600080fd5b505af11580156128fa573d6000803e3d6000fd5b505050505060005a6040517f573ade8100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301523460248301526044820189905287811660648301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063573ade81906084016020604051808303816000875af11580156129ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ee9190613e06565b5060005a9050612a0161256e828461387a565b82341115611c8557611c8533612a17853461387a565b612dd1565b60026001541415612a89576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016126ef565b6002600155565b60035473ffffffffffffffffffffffffffffffffffffffff16156113a9576000612aba3a8461402c565b6003546040517fcff29e6700000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063cff29e6790612b1590339085908790600401614069565b600060405180830381600087803b158015612b2f57600080fd5b505af1158015611251573d6000803e3d6000fd5b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106c39084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613067565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015283169063dd62ed3e90604401602060405180830381865afa158015612c89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cad9190613e06565b6113a9576113a973ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff613176565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526125839085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401612b95565b60005473ffffffffffffffffffffffffffffffffffffffff163314611e58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016126ef565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051612e0891906140ab565b60006040518083038185875af1925050503d8060008114612e45576040519150601f19603f3d011682016040523d82523d6000602084013e612e4a565b606091505b50509050806106c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016126ef565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6101208101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260009283929116906370a0823190602401602060405180830381865afa158015612fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc59190613e06565b6101408401516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a0823190602401602060405180830381865afa158015613038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305c9190613e06565b915091509250929050565b60006130c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166132f89092919063ffffffff16565b90508051600014806130ea5750808060200190518101906130ea9190613fcb565b6106c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016126ef565b80158061321657506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156131f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132149190613e06565b155b6132a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016126ef565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106c39084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401612b95565b6060613307848460008561330f565b949350505050565b6060824710156133a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016126ef565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516133ca91906140ab565b60006040518083038185875af1925050503d8060008114613407576040519150601f19603f3d011682016040523d82523d6000602084013e61340c565b606091505b509150915061341d87838387613428565b979650505050505050565b606083156134bb5782516134b45773ffffffffffffffffffffffffffffffffffffffff85163b6134b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016126ef565b5081613307565b61330783838151156134d05781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ef91906140c7565b73ffffffffffffffffffffffffffffffffffffffff8116811461153857600080fd5b60008060006060848603121561353b57600080fd5b833561354681613504565b95602085013595506040909401359392505050565b60008060008060008060a0878903121561357457600080fd5b863561357f81613504565b95506020870135945060408701359350606087013561359d81613504565b9250608087013567ffffffffffffffff808211156135ba57600080fd5b818901915089601f8301126135ce57600080fd5b8135818111156135dd57600080fd5b8a60208285010111156135ef57600080fd5b6020830194508093505050509295509295509295565b600080600080600080600060c0888a03121561362057600080fd5b873561362b81613504565b96506020880135955060408801359450606088013561364981613504565b93506080880135925060a088013567ffffffffffffffff8082111561366d57600080fd5b818a0191508a601f83011261368157600080fd5b81358181111561369057600080fd5b8b60208260051b85010111156136a557600080fd5b60208301945080935050505092959891949750929550565b6000602082840312156136cf57600080fd5b81356136da81613504565b9392505050565b600080604083850312156136f457600080fd5b82359150602083013561370681613504565b809150509250929050565b60008060006060848603121561372657600080fd5b833561373181613504565b925060208401359150604084013561374881613504565b809150509250925092565b6000806040838503121561376657600080fd5b50508035926020909101359150565b6000806000806080858703121561378b57600080fd5b843561379681613504565b9350602085013592506040850135915060608501356137b481613504565b939692955090935050565b6000806000606084860312156137d457600080fd5b83356137df81613504565b925060208401356137ef81613504565b929592945050506040919091013590565b60008060006060848603121561381557600080fd5b8335925060208401359150604084013561374881613504565b60006020828403121561384057600080fd5b81516136da81613504565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561388c5761388c61384b565b500390565b8035600281106138a057600080fd5b919050565b6000602082840312156138b757600080fd5b6136da82613891565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080858511156138ff57600080fd5b8386111561390c57600080fd5b5050820193919092039150565b6000821982111561392c5761392c61384b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561398357613983613931565b60405290565b6040516101e0810167ffffffffffffffff8111828210171561398357613983613931565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156139f4576139f4613931565b604052919050565b600067ffffffffffffffff821115613a1657613a16613931565b5060051b60200190565b60008060408385031215613a3357600080fd5b613a3c83613891565b915060208084013567ffffffffffffffff80821115613a5a57600080fd5b9085019060a08288031215613a6e57600080fd5b613a76613960565b8235613a8181613504565b8082525083830135848201526040830135604082015260608301356060820152608083013582811115613ab357600080fd5b80840193505087601f840112613ac857600080fd5b82359150613add613ad8836139fc565b6139ad565b82815260059290921b83018401918481019089841115613afc57600080fd5b938501935b83851015613b23578435613b1481613504565b82529385019390850190613b01565b608083015250949794965093945050505050565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015613b9457845173ffffffffffffffffffffffffffffffffffffffff1683529383019391830191600101613b62565b505073ffffffffffffffffffffffffffffffffffffffff969096166060850152505050608001529392505050565b60006020808385031215613bd557600080fd5b825167ffffffffffffffff811115613bec57600080fd5b8301601f81018513613bfd57600080fd5b8051613c0b613ad8826139fc565b81815260059190911b82018301908381019087831115613c2a57600080fd5b928401925b8284101561341d57835182529284019290840190613c2f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60028110613c8757613c876138c0565b9052565b613c958184613c77565b6000602060408184015260e0830173ffffffffffffffffffffffffffffffffffffffff80865116604086015282860151606086015260408601516080860152606086015160a0860152608086015160a060c0870152828151808552610100880191508583019450600092505b80831015613d2357845184168252938501936001929092019190850190613d01565b5098975050505050505050565b60005b83811015613d4b578181015183820152602001613d33565b838111156125835750506000910152565b60008151808452613d74816020860160208601613d30565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260a06060830152613de560a0830185613d5c565b905061ffff831660808301529695505050505050565b80516138a081613504565b600060208284031215613e1857600080fd5b5051919050565b600060208284031215613e3157600080fd5b6040516020810181811067ffffffffffffffff82111715613e5457613e54613931565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff811681146138a057600080fd5b805164ffffffffff811681146138a057600080fd5b805161ffff811681146138a057600080fd5b60006101e08284031215613ebb57600080fd5b613ec3613989565b613ecd8484613e1f565b8152613edb60208401613e61565b6020820152613eec60408401613e61565b6040820152613efd60608401613e61565b6060820152613f0e60808401613e61565b6080820152613f1f60a08401613e61565b60a0820152613f3060c08401613e81565b60c0820152613f4160e08401613e96565b60e0820152610100613f54818501613dfb565b90820152610120613f66848201613dfb565b90820152610140613f78848201613dfb565b90820152610160613f8a848201613dfb565b90820152610180613f9c848201613e61565b908201526101a0613fae848201613e61565b908201526101c0613fc0848201613e61565b908201529392505050565b600060208284031215613fdd57600080fd5b815180151581146136da57600080fd5b60808101613ffb8287613c77565b73ffffffffffffffffffffffffffffffffffffffff8516602083015283604083015282606083015295945050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156140645761406461384b565b500290565b73ffffffffffffffffffffffffffffffffffffffff8416815260208101839052606081016006831061409d5761409d6138c0565b826040830152949350505050565b600082516140bd818460208701613d30565b9190910192915050565b6020815260006136da6020830184613d5c56fea2646970667358221220cd410000fc111763ce4e0d83f2c66dc239d592df1a1125327dab6df1a1e00f8864736f6c634300080a0033",
  "devdoc": {
    "author": "PAC",
    "events": {
      "LeverageDeposit(address,address,uint256,uint256)": {
        "details": "Emitted during leverageDeposit()",
        "params": {
          "asset": "The address of the asset",
          "borrowAmount": "The amount borrowed from lending pool for the deposit*",
          "cashAmount": "The amount of cash for the deposit",
          "user": "The address of the user"
        }
      },
      "MultiplierDeposit(address,address,uint256,uint256,address)": {
        "details": "Emitted during multiplierDeposit()",
        "params": {
          "asset": "The address of the asset",
          "borrowAmount": "The amount borrowed from lending pool for the deposit",
          "cashAmount": "The amount of cash for the deposit",
          "depositAsset": "The address of the deposit asset*",
          "user": "The address of the user"
        }
      },
      "RescueToken(address,address,uint256)": {
        "details": "Emitted during rescueToken()",
        "params": {
          "amount": "The amount being rescued*",
          "to": "The address of the recipient",
          "token": "The address of the token"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "borrowETH(uint256,uint256)": {
        "details": "borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `Pool.borrow`.",
        "params": {
          "amount": "the amount of ETH to borrow",
          "interestRateMode": "the interest rate mode"
        }
      },
      "depositETH(address)": {
        "details": "deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens) is minted.",
        "params": {
          "onBehalfOf": "address of the user who will receive the aTokens representing the deposit*"
        }
      },
      "executeOperation(address,uint256,uint256,address,bytes)": {
        "details": "Ensure that the contract can return the debt + premium, e.g., has      enough funds to repay and has approved the Pool to pull the total amount",
        "params": {
          "amount": "The amount of the flash-borrowed asset",
          "asset": "The address of the flash-borrowed asset",
          "initiator": "The address of the flashloan initiator",
          "params": "The byte-encoded params passed when initiating the flashloan",
          "premium": "The fee of the flash-borrowed asset"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds, false otherwise"
        }
      },
      "leverageDeposit(address,uint256,uint256)": {
        "details": "Loop the deposit and borrow of an asset",
        "params": {
          "asset": "to deposit",
          "borrowAmount": "borrow amount for the deposit*",
          "cashAmount": "cash amount for the deposit"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repayETH(uint256,uint256,address)": {
        "details": "repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).",
        "params": {
          "amount": "the amount to repay, or uint256(-1) if the user wants to repay everything",
          "onBehalfOf": "the address for which msg.sender is repaying",
          "rateMode": "the rate mode to repay"
        }
      },
      "rescueToken(address,address,uint256)": {
        "params": {
          "amount": "The amount to be rescued*",
          "to": "The account address to receive token",
          "token": "The token address to be rescued"
        }
      },
      "setGasRefund(address)": {
        "params": {
          "_gasRefund": "The address of user gas refund contract*"
        }
      },
      "supplyERC20(address,uint256,address)": {
        "params": {
          "amount": "The amount to be supplied",
          "asset": "The address of the underlying asset to supply",
          "onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawERC20(address,uint256,address)": {
        "params": {
          "amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
          "asset": "The address of the underlying asset to withdraw",
          "to": "The address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
        }
      },
      "withdrawETH(uint256,address)": {
        "details": "withdraws the WETH _reserves of msg.sender.",
        "params": {
          "amount": "amount of aWETH to withdraw and receive native ETH",
          "to": "address of the user who will receive native ETH"
        }
      }
    },
    "title": "PAC Pool Wrapper Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "POOL()": {
        "notice": "Lending Pool address"
      },
      "WETH()": {
        "notice": "Wrapped ETH contract address"
      },
      "executeOperation(address,uint256,uint256,address,bytes)": {
        "notice": "Executes an operation after receiving the flash-borrowed asset"
      },
      "gasRefund()": {
        "notice": "Gas refund contract address"
      },
      "rescueToken(address,address,uint256)": {
        "notice": "Rescue erc20/ETH from this contract address. Only owner can call this function"
      },
      "setGasRefund(address)": {
        "notice": "Set gas refund address. Only owner can call this function"
      },
      "supplyERC20(address,uint256,address)": {
        "notice": "Supplly an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User supplies 100 USDC and gets in return 100 aUSDC"
      },
      "swapRouter()": {
        "notice": "UniswapV2 swap router contract address"
      },
      "withdrawERC20(address,uint256,address)": {
        "notice": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 690,
        "contract": "contracts/PacPoolWrapper.sol:PacPoolWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 806,
        "contract": "contracts/PacPoolWrapper.sol:PacPoolWrapper",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2096,
        "contract": "contracts/PacPoolWrapper.sol:PacPoolWrapper",
        "label": "swapRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router02)8079"
      },
      {
        "astId": 2099,
        "contract": "contracts/PacPoolWrapper.sol:PacPoolWrapper",
        "label": "gasRefund",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)8079": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
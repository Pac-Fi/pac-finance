{
  "address": "0x89A22b7EB853734f94CF8e0a109d6308E786995C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "permissioned",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_MINT_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPermissioned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setMintable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "permissioned",
          "type": "bool"
        }
      ],
      "name": "setPermissioned",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "childContracts",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnershipOfChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x804215388dbf6b2400e0724a89901209a46e4f2e1eda3fe7528448588a394de9",
  "receipt": {
    "to": null,
    "from": "0x018281853eCC543Aa251732e8FDaa7323247eBeB",
    "contractAddress": "0x89A22b7EB853734f94CF8e0a109d6308E786995C",
    "transactionIndex": 9,
    "gasUsed": "922384",
    "logsBloom": "0x
    "blockHash": "0x4911ff051bdc643ac28736f5143260a815dda230909554413f1d39b2198ab09b",
    "transactionHash": "0x804215388dbf6b2400e0724a89901209a46e4f2e1eda3fe7528448588a394de9",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 1908293,
        "transactionHash": "0x804215388dbf6b2400e0724a89901209a46e4f2e1eda3fe7528448588a394de9",
        "address": "0x89A22b7EB853734f94CF8e0a109d6308E786995C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000018281853ecc543aa251732e8fdaa7323247ebeb"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x4911ff051bdc643ac28736f5143260a815dda230909554413f1d39b2198ab09b"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 1908293,
        "transactionHash": "0x804215388dbf6b2400e0724a89901209a46e4f2e1eda3fe7528448588a394de9",
        "address": "0x89A22b7EB853734f94CF8e0a109d6308E786995C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000018281853ecc543aa251732e8fdaa7323247ebeb",
          "0x000000000000000000000000018281853ecc543aa251732e8fdaa7323247ebeb"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x4911ff051bdc643ac28736f5143260a815dda230909554413f1d39b2198ab09b"
      }
    ],
    "blockNumber": 1908293,
    "cumulativeGasUsed": "1763115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x018281853eCC543Aa251732e8FDaa7323247eBeB",
    false
  ],
  "numDeployments": 1,
  "solcInputHash": "2684467b8f7757f43fe87a0ef5ee1384",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"permissioned\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_MINT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPermissioned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setMintable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"permissioned\",\"type\":\"bool\"}],\"name\":\"setPermissioned\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"childContracts\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Ownable Faucet Contract\",\"kind\":\"dev\",\"methods\":{\"isMintable(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"True if the asset is mintable, false otherwise\"}},\"isPermissioned()\":{\"returns\":{\"_0\":\"Returns a boolean, if true the mode is enabled, if false is disabled\"}},\"mint(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to mint\",\"to\":\"The address to send the minted tokens\",\"token\":\"The address of the token to perform the mint\"},\"returns\":{\"_0\":\"The amount minted*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMintable(address,bool)\":{\"params\":{\"active\":\"True to enable, false to disable\",\"asset\":\"The address of the asset\"}},\"setPermissioned(bool)\":{\"params\":{\"value\":\"If true, ask for authentication at `mint` function, if false, disable the authentication\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferOwnershipOfChild(address[],address)\":{\"params\":{\"childContracts\":\"A list of child contract addresses\",\"newOwner\":\"The address of the new owner\"}}},\"stateVariables\":{\"MAX_MINT_AMOUNT\":{\"return\":\"The maximum amount of tokens per mint allowed\",\"returns\":{\"_0\":\"The maximum amount of tokens per mint allowed\"}}},\"title\":\"Faucet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAX_MINT_AMOUNT()\":{\"notice\":\"Returns the maximum amount of tokens per mint allowed\"},\"isMintable(address)\":{\"notice\":\"Returns whether the asset is mintable\"},\"isPermissioned()\":{\"notice\":\"Getter to determine if permissioned mode is enabled or disabled\"},\"mint(address,address,uint256)\":{\"notice\":\"Function to mint Testnet tokens to the destination address\"},\"setMintable(address,bool)\":{\"notice\":\"Enable or disable the minting of the faucet asset\"},\"setPermissioned(bool)\":{\"notice\":\"Enable or disable the need of authentication to call `mint` function\"},\"transferOwnershipOfChild(address[],address)\":{\"notice\":\"Transfer the ownership of child contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol\":\"Faucet\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ab8ca5064cf230337feaa22c261ac66e49ec5bb79e35297ffc21564efde5d86\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x4658ac8ee0aa80e32594d84dbe8f84c2e77c62136fcf249a1c8826281d5c08e2\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name, string memory symbol) {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x656a2d9f26c5517c6f18e27f605a369b0e55cc54b74d159ddbd73c40eb95a8c8\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x9f865ae3d19d19b2ed680009d6a83ae7fdd80594a86fccf567523d68760a648e\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xbf3e689995e9e1552ac39a6b428cc43ff6221f8aca5015b78604f7d0bc99dfe4\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary SafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x + y) >= x);\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x - y) <= x);\\n        }\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @param message The error msg\\n    /// @return z The difference of x and y\\n    function sub(\\n        uint256 x,\\n        uint256 y,\\n        string memory message\\n    ) internal pure returns (uint256 z) {\\n        unchecked {\\n            require((z = x - y) <= x, message);\\n        }\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            require(x == 0 || (z = x * y) / x == y);\\n        }\\n    }\\n\\n    /// @notice Returns x / y, reverts if overflows - no specific check, solidity reverts on division by 0\\n    /// @param x The numerator\\n    /// @param y The denominator\\n    /// @return z The product of x and y\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x / y;\\n    }\\n}\\n\",\"keccak256\":\"0xc38ebaad7dbecebebd676ae9732db079202f66c4fa408a0a9e9c694046e17648\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IERC20WithPermit\\n * @author Aave\\n * @notice Interface for the permit function (EIP-2612)\\n */\\ninterface IERC20WithPermit is IERC20 {\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb4bccf157c458492734675806b8fff5389026316b9b1a97328f65a1c32139c57\",\"license\":\"AGPL-3.0\"},\"contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"../../../../core-v3/contracts/dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport {TestnetERC20} from \\\"./TestnetERC20.sol\\\";\\nimport {IFaucet} from \\\"./IFaucet.sol\\\";\\n\\n/**\\n * @title Faucet\\n * @dev Ownable Faucet Contract\\n */\\ncontract Faucet is IFaucet, Ownable {\\n    /// @inheritdoc IFaucet\\n    uint256 public constant MAX_MINT_AMOUNT = 10000;\\n\\n    address public constant USDB = 0x4200000000000000000000000000000000000022;\\n\\n    // Mapping to control mint of assets (allowed by default)\\n    mapping(address => bool) internal _nonMintable;\\n\\n    // If _permissioned is enabled, then only owner can mint Testnet ERC20 tokens\\n    // If disabled, anyone can call mint at the faucet, for PoC environments\\n    bool internal _permissioned;\\n\\n    constructor(address owner, bool permissioned) {\\n        require(owner != address(0));\\n        transferOwnership(owner);\\n        _permissioned = permissioned;\\n    }\\n\\n    /**\\n     * @dev Function modifier, if _permissioned is enabled then msg.sender is required to be the owner\\n     */\\n    modifier onlyOwnerIfPermissioned() {\\n        if (_permissioned == true) {\\n            require(\\n                owner() == _msgSender(),\\n                \\\"Ownable: caller is not the owner\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function mint(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyOwnerIfPermissioned returns (uint256) {\\n        require(!_nonMintable[token], \\\"Error: not mintable\\\");\\n        require(\\n            amount <= MAX_MINT_AMOUNT * (10 ** TestnetERC20(token).decimals()),\\n            \\\"Error: Mint limit transaction exceeded\\\"\\n        );\\n\\n        if (token == USDB) {\\n            TestnetERC20(USDB).transfer(to, amount);\\n        } else {\\n            TestnetERC20(token).mint(to, amount);\\n        }\\n\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function setPermissioned(bool permissioned) external override onlyOwner {\\n        _permissioned = permissioned;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function isPermissioned() external view override returns (bool) {\\n        return _permissioned;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function setMintable(\\n        address asset,\\n        bool active\\n    ) external override onlyOwner {\\n        _nonMintable[asset] = !active;\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function isMintable(address asset) external view override returns (bool) {\\n        return !_nonMintable[asset];\\n    }\\n\\n    /// @inheritdoc IFaucet\\n    function transferOwnershipOfChild(\\n        address[] calldata childContracts,\\n        address newOwner\\n    ) external override onlyOwner {\\n        for (uint256 i = 0; i < childContracts.length; i++) {\\n            Ownable(childContracts[i]).transferOwnership(newOwner);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x73df28032f2439f3923d5ab7bd826391a9e8c53bd4775ed8418a7da870508bd7\",\"license\":\"BUSL-1.1\"},\"contracts/periphery-v3/contracts/mocks/testnet-helpers/IFaucet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IFaucet {\\n    /**\\n     * @notice Returns the maximum amount of tokens per mint allowed\\n     * @return The maximum amount of tokens per mint allowed\\n     */\\n    function MAX_MINT_AMOUNT() external pure returns (uint256);\\n\\n    /**\\n     * @notice Function to mint Testnet tokens to the destination address\\n     * @param token The address of the token to perform the mint\\n     * @param to The address to send the minted tokens\\n     * @param amount The amount of tokens to mint\\n     * @return The amount minted\\n     **/\\n    function mint(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Enable or disable the need of authentication to call `mint` function\\n     * @param value If true, ask for authentication at `mint` function, if false, disable the authentication\\n     */\\n    function setPermissioned(bool value) external;\\n\\n    /**\\n     * @notice Getter to determine if permissioned mode is enabled or disabled\\n     * @return Returns a boolean, if true the mode is enabled, if false is disabled\\n     */\\n    function isPermissioned() external view returns (bool);\\n\\n    /**\\n     * @notice Enable or disable the minting of the faucet asset\\n     * @param asset The address of the asset\\n     * @param active True to enable, false to disable\\n     */\\n    function setMintable(address asset, bool active) external;\\n\\n    /**\\n     * @notice Returns whether the asset is mintable\\n     * @param asset The address of the asset\\n     * @return True if the asset is mintable, false otherwise\\n     */\\n    function isMintable(address asset) external view returns (bool);\\n\\n    /**\\n     * @notice Transfer the ownership of child contracts\\n     * @param childContracts A list of child contract addresses\\n     * @param newOwner The address of the new owner\\n     */\\n    function transferOwnershipOfChild(\\n        address[] calldata childContracts,\\n        address newOwner\\n    ) external;\\n}\\n\",\"keccak256\":\"0x4a9fffb776365ee49eed57736a2a5c61b1add195de00201b89467dd5c5856d26\",\"license\":\"BUSL-1.1\"},\"contracts/periphery-v3/contracts/mocks/testnet-helpers/TestnetERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"../../../../core-v3/contracts/dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport {ERC20} from \\\"../../../../core-v3/contracts/dependencies/openzeppelin/contracts/ERC20.sol\\\";\\nimport {IERC20WithPermit} from \\\"../../../../core-v3/contracts/interfaces/IERC20WithPermit.sol\\\";\\n\\n/**\\n * @title TestnetERC20\\n * @dev ERC20 minting logic\\n */\\ncontract TestnetERC20 is IERC20WithPermit, ERC20, Ownable {\\n    bytes public constant EIP712_REVISION = bytes(\\\"1\\\");\\n    bytes32 internal constant EIP712_DOMAIN =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    // Map of address nonces (address => nonce)\\n    mapping(address => uint256) internal _nonces;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address owner\\n    ) ERC20(name, symbol) {\\n        uint256 chainId = block.chainid;\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN,\\n                keccak256(bytes(name)),\\n                keccak256(EIP712_REVISION),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n        _setupDecimals(decimals);\\n        require(owner != address(0));\\n        transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc IERC20WithPermit\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(owner != address(0), \\\"INVALID_OWNER\\\");\\n        //solium-disable-next-line\\n        require(block.timestamp <= deadline, \\\"INVALID_EXPIRATION\\\");\\n        uint256 currentValidNonce = _nonces[owner];\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        currentValidNonce,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        require(owner == ecrecover(digest, v, r, s), \\\"INVALID_SIGNATURE\\\");\\n        _nonces[owner] = currentValidNonce + 1;\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens\\n     * @param value The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(uint256 value) public virtual returns (bool) {\\n        _mint(_msgSender(), value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Function to mint tokens to address\\n     * @param account The account to mint tokens.\\n     * @param value The amount of tokens to mint.\\n     * @return A boolean that indicates if the operation was successful.\\n     */\\n    function mint(\\n        address account,\\n        uint256 value\\n    ) public virtual returns (bool) {\\n        _mint(account, value);\\n        return true;\\n    }\\n\\n    function nonces(address owner) public view returns (uint256) {\\n        return _nonces[owner];\\n    }\\n}\\n\",\"keccak256\":\"0x99aeb3dcf79caaf320885ff79266358668537ca8753f49772de1672c9827754d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063f2fde38b1161005b578063f2fde38b146101d7578063f7eb06c4146101ea578063fa9b7018146101fd57600080fd5b80638da5cb5b1461018d578063c6c3bbe6146101ab578063e2a4157c146101cc57600080fd5b806331a0edec116100b257806331a0edec14610132578063506f26cc14610172578063715018a61461018557600080fd5b80631a678cd3146100ce578063222b15fb146100e3575b600080fd5b6100e16100dc366004610b51565b610206565b005b61011d6100f1366004610b9e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff161590565b60405190151581526020015b60405180910390f35b61014d73420000000000000000000000000000000000002281565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610129565b6100e1610180366004610bb9565b6102bd565b6100e161040c565b60005473ffffffffffffffffffffffffffffffffffffffff1661014d565b6101be6101b9366004610c3d565b6104fc565b604051908152602001610129565b60025460ff1661011d565b6100e16101e5366004610b9e565b6108ba565b6100e16101f8366004610c79565b610a6b565b6101be61271081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461028c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff16331461033e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610283565b60005b828110156104065783838281811061035b5761035b610cb0565b90506020020160208101906103709190610b9e565b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152919091169063f2fde38b90602401600060405180830381600087803b1580156103db57600080fd5b505af11580156103ef573d6000803e3d6000fd5b5050505080806103fe90610d0e565b915050610341565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610283565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60025460009060ff161515600114156105905760005473ffffffffffffffffffffffffffffffffffffffff163314610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610283565b73ffffffffffffffffffffffffffffffffffffffff841660009081526001602052604090205460ff1615610620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4572726f723a206e6f74206d696e7461626c65000000000000000000000000006044820152606401610283565b8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068f9190610d47565b61069a90600a610e8c565b6106a690612710610e9b565b821115610735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4572726f723a204d696e74206c696d6974207472616e73616374696f6e20657860448201527f63656564656400000000000000000000000000000000000000000000000000006064820152608401610283565b73ffffffffffffffffffffffffffffffffffffffff84167342000000000000000000000000000000000000221415610818576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602481018390527342000000000000000000000000000000000000229063a9059cbb906044016020604051808303816000875af11580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190610ed8565b506108b3565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490528516906340c10f19906044016020604051808303816000875af115801561088d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b19190610ed8565b505b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461093b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610283565b73ffffffffffffffffffffffffffffffffffffffff81166109de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610283565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff163314610aec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610283565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115919091179055565b8015158114610b4e57600080fd5b50565b600060208284031215610b6357600080fd5b8135610b6e81610b40565b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b9957600080fd5b919050565b600060208284031215610bb057600080fd5b610b6e82610b75565b600080600060408486031215610bce57600080fd5b833567ffffffffffffffff80821115610be657600080fd5b818601915086601f830112610bfa57600080fd5b813581811115610c0957600080fd5b8760208260051b8501011115610c1e57600080fd5b602092830195509350610c349186019050610b75565b90509250925092565b600080600060608486031215610c5257600080fd5b610c5b84610b75565b9250610c6960208501610b75565b9150604084013590509250925092565b60008060408385031215610c8c57600080fd5b610c9583610b75565b91506020830135610ca581610b40565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d4057610d40610cdf565b5060010190565b600060208284031215610d5957600080fd5b815160ff81168114610b6e57600080fd5b600181815b80851115610dc357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610da957610da9610cdf565b80851615610db657918102915b93841c9390800290610d6f565b509250929050565b600082610dda57506001610e86565b81610de757506000610e86565b8160018114610dfd5760028114610e0757610e23565b6001915050610e86565b60ff841115610e1857610e18610cdf565b50506001821b610e86565b5060208310610133831016604e8410600b8410161715610e46575081810a610e86565b610e508383610d6a565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610e8257610e82610cdf565b0290505b92915050565b6000610b6e60ff841683610dcb565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ed357610ed3610cdf565b500290565b600060208284031215610eea57600080fd5b8151610b6e81610b4056fea2646970667358221220e331f520d697567f797870d1cd9ad3692d75407a54370e33409d37e26d6bcac264736f6c634300080a0033",
  "devdoc": {
    "details": "Ownable Faucet Contract",
    "kind": "dev",
    "methods": {
      "isMintable(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "True if the asset is mintable, false otherwise"
        }
      },
      "isPermissioned()": {
        "returns": {
          "_0": "Returns a boolean, if true the mode is enabled, if false is disabled"
        }
      },
      "mint(address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens to mint",
          "to": "The address to send the minted tokens",
          "token": "The address of the token to perform the mint"
        },
        "returns": {
          "_0": "The amount minted*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMintable(address,bool)": {
        "params": {
          "active": "True to enable, false to disable",
          "asset": "The address of the asset"
        }
      },
      "setPermissioned(bool)": {
        "params": {
          "value": "If true, ask for authentication at `mint` function, if false, disable the authentication"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferOwnershipOfChild(address[],address)": {
        "params": {
          "childContracts": "A list of child contract addresses",
          "newOwner": "The address of the new owner"
        }
      }
    },
    "stateVariables": {
      "MAX_MINT_AMOUNT": {
        "return": "The maximum amount of tokens per mint allowed",
        "returns": {
          "_0": "The maximum amount of tokens per mint allowed"
        }
      }
    },
    "title": "Faucet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAX_MINT_AMOUNT()": {
        "notice": "Returns the maximum amount of tokens per mint allowed"
      },
      "isMintable(address)": {
        "notice": "Returns whether the asset is mintable"
      },
      "isPermissioned()": {
        "notice": "Getter to determine if permissioned mode is enabled or disabled"
      },
      "mint(address,address,uint256)": {
        "notice": "Function to mint Testnet tokens to the destination address"
      },
      "setMintable(address,bool)": {
        "notice": "Enable or disable the minting of the faucet asset"
      },
      "setPermissioned(bool)": {
        "notice": "Enable or disable the need of authentication to call `mint` function"
      },
      "transferOwnershipOfChild(address[],address)": {
        "notice": "Transfer the ownership of child contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 915,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1192,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "_nonMintable",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1194,
        "contract": "contracts/periphery-v3/contracts/mocks/testnet-helpers/Faucet.sol:Faucet",
        "label": "_permissioned",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}
{
  "address": "0x3795d531869dBBC46C2B2e361AEE6F8d1fDBF9c9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gasRefund",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aWETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aUSDB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RescueToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aUSDB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aWETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        }
      ],
      "name": "addDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRefundedGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributeYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasRefund",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isDistributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80061750a996a4bb9f0f0593b28317ebd6dad382005fb94a9858d52867daebbe",
  "receipt": {
    "to": null,
    "from": "0x018281853eCC543Aa251732e8FDaa7323247eBeB",
    "contractAddress": "0x3795d531869dBBC46C2B2e361AEE6F8d1fDBF9c9",
    "transactionIndex": 1,
    "gasUsed": "1028979",
    "logsBloom": "0x
    "blockHash": "0x1b8d17235a72d1c442dca3ed3773c920db70f3edcaf2927e466d2939c848d00e",
    "transactionHash": "0x80061750a996a4bb9f0f0593b28317ebd6dad382005fb94a9858d52867daebbe",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 3196690,
        "transactionHash": "0x80061750a996a4bb9f0f0593b28317ebd6dad382005fb94a9858d52867daebbe",
        "address": "0x3795d531869dBBC46C2B2e361AEE6F8d1fDBF9c9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000018281853ecc543aa251732e8fdaa7323247ebeb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1b8d17235a72d1c442dca3ed3773c920db70f3edcaf2927e466d2939c848d00e"
      }
    ],
    "blockNumber": 3196690,
    "cumulativeGasUsed": "1075888",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A5A363e068D689295789FE39b21175B33964f14",
    "0xcf1c54Aed39E7773e23418C252d9d1aB11c49a62",
    "0x8A3De08BfA0E5F298550889f6801dD910526CAFD",
    "0x3df9C3E7105B2bEdd0b7b75c9ECF5C9041313186"
  ],
  "numDeployments": 1,
  "solcInputHash": "dae4eb65d51fd68af699a2fdc813309b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasRefund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aWETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aUSDB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aUSDB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aWETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"addDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefundedGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YieldGasController.sol\":\"YieldGasController\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/YieldGasController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IAToken} from \\\"./core-v3/contracts/interfaces/IAToken.sol\\\";\\nimport {IBlast} from \\\"./interfaces/IBlast.sol\\\";\\nimport {IGasReceiver} from \\\"./interfaces/IGasReceiver.sol\\\";\\nimport {INativeYieldDistribute} from \\\"./interfaces/INativeYieldDistribute.sol\\\";\\n\\ncontract YieldGasController is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event RescueToken(\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    address public immutable pool;\\n    address public immutable gasRefund;\\n    address public immutable aWETH;\\n    address public immutable aUSDB;\\n    mapping(address => bool) public isDistributor;\\n\\n    modifier onlyDistributor() {\\n        require(isDistributor[msg.sender], \\\"not allowed\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _pool,\\n        address _gasRefund,\\n        address _aWETH,\\n        address _aUSDB\\n    ) {\\n        pool = _pool;\\n        gasRefund = _gasRefund;\\n        aWETH = _aWETH;\\n        aUSDB = _aUSDB;\\n    }\\n\\n    function distributeYield() external onlyDistributor {\\n        _distributeYield(aWETH);\\n        _distributeYield(aUSDB);\\n    }\\n\\n    function _distributeYield(address aToken) internal {\\n        IAToken(aToken).claimYield(address(this));\\n        address underlying = IAToken(aToken).UNDERLYING_ASSET_ADDRESS();\\n        uint256 balance = IERC20(underlying).balanceOf(address(this));\\n        address yieldDistribute = IAToken(aToken).yieldDistributor();\\n        IERC20(underlying).approve(yieldDistribute, balance);\\n        INativeYieldDistribute(yieldDistribute).distributeYield(balance);\\n    }\\n\\n    function claimRefundedGas() external onlyDistributor {\\n        IGasReceiver(pool).claimRefundedGas(gasRefund);\\n    }\\n\\n    function addDistributor(address distributor) external onlyOwner {\\n        isDistributor[distributor] = true;\\n    }\\n\\n    function transferOwnership(\\n        address target,\\n        address newOwner\\n    ) external onlyOwner {\\n        Ownable(target).transferOwnership(newOwner);\\n    }\\n\\n    function rescueToken(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (token == address(0)) {\\n            _safeTransferETH(to, amount);\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n        emit RescueToken(token, to, amount);\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7aa9fbc82f885a5200b7d86dce435d90d270c4a16c83f50e3c997e9b5b183766\",\"license\":\"MIT\"},\"contracts/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x9f865ae3d19d19b2ed680009d6a83ae7fdd80594a86fccf567523d68760a648e\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n */\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The scaled amount being transferred\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event BalanceTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Mints `amount` aTokens to `user`\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted aTokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address caller,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @dev In some instances, the mint event could be emitted from a burn transaction\\n     * if the amount to burn is less than the interest that the user accrued\\n     * @param from The address from which the aTokens will be burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The next liquidity index of the reserve\\n     */\\n    function burn(\\n        address from,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @notice Mints aTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n     * @param from The address getting liquidated, current owner of the aTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     */\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the underlying asset to `target`.\\n     * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n     * @param target The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     */\\n    function transferUnderlyingTo(address target, uint256 amount) external;\\n\\n    /**\\n     * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n     * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n     * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n     * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n     * @param user The user executing the repayment\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed\\n     * @param amount The amount getting repaid\\n     */\\n    function handleRepayment(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @return The address of the underlying asset\\n     */\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n     * @return Address of the Aave treasury\\n     */\\n    function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Get the domain separator for the token\\n     * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n     * @return The domain separator of the token at current chain\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the nonce for owner.\\n     * @param owner The address of the owner\\n     * @return The nonce of the owner\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    function configureClaimableYield() external;\\n\\n    /**\\n     * @notice Configure blast point operator\\n     * @param blastPoints The address of BlastPoints\\n     * @param pointsOperator The address of the point operator\\n     */\\n    function configurePointOperator(\\n        address blastPoints,\\n        address pointsOperator\\n    ) external;\\n\\n    /**\\n     * @notice Claim blast native yield\\n     * @param recipient The address to receive yield\\n     */\\n    function claimYield(address recipient) external;\\n\\n    /**\\n     * @notice Get yield distributor contract address\\n     */\\n    function yieldDistributor() external view returns (address);\\n}\\n\",\"keccak256\":\"0x83f56152440768fb87454b1662f48077156b6829675a99d3a706511a76fbf353\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     */\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc151038fc0fadac268bf9e71ed67d04c6217169f7c18edfea38f0f78edf3dbfd\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n */\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals The decimals of the underlying\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the aToken\\n     * @param pool The pool contract that is initializing this contract\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x83f88dddf1c55903a757d2c4d8d1e8d8c2f99ca2e59ecc974a5a90e1ec946cf1\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns the BLAST connected to this contract\\n     * @return The address of the BLAST\\n     */\\n    function BLAST() external view returns (address);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf3f38ee4e51d363fb78330a99bdc6216f3ec2ac7c67ee3ee77d21fe8c8051ee\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x5ed67f81bd2a927b7337c4235c183e541962a6f4d9d582bb74b45908492cc4f4\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted tokens\\n     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Mint(\\n        address indexed caller,\\n        address indexed onBehalfOf,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted after the burn action\\n     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n     * @param from The address from which the tokens will be burned\\n     * @param target The address that will receive the underlying, if any\\n     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Returns the scaled balance of the user.\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n     * at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     */\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled total supply\\n     */\\n    function getScaledUserBalanceAndSupply(\\n        address user\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns last index interest was accrued to the user's balance\\n     * @param user The address of the user\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\n     */\\n    function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xefec728d1fe7d2384e5faf852bad7c5ff6d59d1031900384e1f9c175edff28e4\",\"license\":\"AGPL-3.0\"},\"contracts/core-v3/contracts/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xb93629c45e8479d3297ce5adf5efb5e8bddedf4caf5c66c3459d595004d56088\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nenum YieldMode {\\n    AUTOMATIC,\\n    VOID,\\n    CLAIMABLE\\n}\\n\\nenum GasMode {\\n    VOID,\\n    CLAIMABLE\\n}\\n\\ninterface IBlast {\\n    // configure\\n    function configureContract(\\n        address contractAddress,\\n        YieldMode _yield,\\n        GasMode gasMode,\\n        address governor\\n    ) external;\\n    function configure(\\n        YieldMode _yield,\\n        GasMode gasMode,\\n        address governor\\n    ) external;\\n\\n    // base configuration options\\n    function configureClaimableYield() external;\\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\\n    function configureAutomaticYield() external;\\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\\n    function configureVoidYield() external;\\n    function configureVoidYieldOnBehalf(address contractAddress) external;\\n    function configureClaimableGas() external;\\n    function configureClaimableGasOnBehalf(address contractAddress) external;\\n    function configureVoidGas() external;\\n    function configureVoidGasOnBehalf(address contractAddress) external;\\n    function configureGovernor(address _governor) external;\\n    function configureGovernorOnBehalf(\\n        address _newGovernor,\\n        address contractAddress\\n    ) external;\\n\\n    // claim yield\\n    function claimYield(\\n        address contractAddress,\\n        address recipientOfYield,\\n        uint256 amount\\n    ) external returns (uint256);\\n    function claimAllYield(\\n        address contractAddress,\\n        address recipientOfYield\\n    ) external returns (uint256);\\n\\n    // claim gas\\n    function claimAllGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n    function claimGasAtMinClaimRate(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 minClaimRateBips\\n    ) external returns (uint256);\\n    function claimMaxGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n    function claimGas(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 gasToClaim,\\n        uint256 gasSecondsToConsume\\n    ) external returns (uint256);\\n\\n    // read functions\\n    function readClaimableYield(\\n        address contractAddress\\n    ) external view returns (uint256);\\n    function readYieldConfiguration(\\n        address contractAddress\\n    ) external view returns (uint8);\\n    function readGasParams(\\n        address contractAddress\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 etherSeconds,\\n            uint256 etherBalance,\\n            uint256 lastUpdated,\\n            GasMode\\n        );\\n}\\n\",\"keccak256\":\"0x7fd2e575d0ee5ecc7fc7be8a91f42245c3686cfe2330cddea6f156aac0e639f2\",\"license\":\"MIT\"},\"contracts/interfaces/IGasReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface IGasReceiver {\\n    function claimRefundedGas(address recipient) external;\\n}\\n\",\"keccak256\":\"0x5e15186f98d7fc4c4447fe8b8f5dafbadd0b0ab66c5a411825cfe277da926f3c\",\"license\":\"MIT\"},\"contracts/interfaces/INativeYieldDistribute.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface INativeYieldDistribute {\\n    function aTokenBalanceChange(address user) external;\\n\\n    function distributeYield(uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0x50d8dea668dc6dfefbeba27fe1fff5c4c65d54aa9e56de2d70accad38a593394\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80637250e2241161008c5780638f0c86fa116100665780638f0c86fa146101e15780639c6a8ff014610214578063e5711e8b1461023b578063f2fde38b1461024e57600080fd5b80637250e224146101a85780638a570a12146101bb5780638da5cb5b146101c357600080fd5b80636d2a583a116100bd5780636d2a583a146101665780636d4354211461018d578063715018a6146101a057600080fd5b806316f0115b146100e45780632ba4b3dd146101355780635bc758e21461013f575b600080fd5b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61013d610261565b005b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b61013d61019b366004610f7e565b6103a2565b61013d61042f565b61013d6101b6366004610fb7565b610443565b61013d61049d565b60005473ffffffffffffffffffffffffffffffffffffffff1661010b565b6102046101ef366004610fb7565b60016020526000908152604090205460ff1681565b604051901515815260200161012c565b61010b7f000000000000000000000000000000000000000000000000000000000000000081565b61013d610249366004610fdb565b610568565b61013d61025c366004610fb7565b610627565b3360009081526001602052604090205460ff166102df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420616c6c6f77656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6040517f2cca1cdf00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001690632cca1cdf90602401600060405180830381600087803b15801561038857600080fd5b505af115801561039c573d6000803e3d6000fd5b50505050565b6103aa6106de565b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff828116600483015283169063f2fde38b90602401600060405180830381600087803b15801561041357600080fd5b505af1158015610427573d6000803e3d6000fd5b505050505050565b6104376106de565b610441600061075f565b565b61044b6106de565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020819052604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b3360009081526001602052604090205460ff16610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f6e6f7420616c6c6f77656400000000000000000000000000000000000000000060448201526064016102d6565b61053f7f00000000000000000000000000000000000000000000000000000000000000006107d4565b6104417f00000000000000000000000000000000000000000000000000000000000000006107d4565b6105706106de565b73ffffffffffffffffffffffffffffffffffffffff831661059a576105958282610aef565b6105bb565b6105bb73ffffffffffffffffffffffffffffffffffffffff84168383610bd8565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167faabf44ab9d5bef08d1b60f287a337f0d11a248e49741ad189b429e47e98ba9108360405161061a91815260200190565b60405180910390a3505050565b61062f6106de565b73ffffffffffffffffffffffffffffffffffffffff81166106d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102d6565b6106db8161075f565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d6565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040517f999927df00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff82169063999927df90602401600060405180830381600087803b15801561083b57600080fd5b505af115801561084f573d6000803e3d6000fd5b5050505060008173ffffffffffffffffffffffffffffffffffffffff1663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c4919061101c565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190611039565b905060008373ffffffffffffffffffffffffffffffffffffffff1663a38c2c3d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb919061101c565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152602482018590529192509084169063095ea7b3906044016020604051808303816000875af1158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190611052565b506040517fc8cc5cd80000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82169063c8cc5cd890602401600060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b5050505050505050565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff8416908390604051610b2691906110a0565b60006040518083038185875af1925050503d8060008114610b63576040519150601f19603f3d011682016040523d82523d6000602084013e610b68565b606091505b5050905080610bd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016102d6565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610bd392869291600091610ca3918516908490610d50565b9050805160001480610cc4575080806020019051810190610cc49190611052565b610bd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102d6565b6060610d5f8484600085610d67565b949350505050565b606082471015610df9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102d6565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e2291906110a0565b60006040518083038185875af1925050503d8060008114610e5f576040519150601f19603f3d011682016040523d82523d6000602084013e610e64565b606091505b5091509150610e7587838387610e80565b979650505050505050565b60608315610f13578251610f0c5773ffffffffffffffffffffffffffffffffffffffff85163b610f0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d6565b5081610d5f565b610d5f8383815115610f285781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d691906110bc565b73ffffffffffffffffffffffffffffffffffffffff811681146106db57600080fd5b60008060408385031215610f9157600080fd5b8235610f9c81610f5c565b91506020830135610fac81610f5c565b809150509250929050565b600060208284031215610fc957600080fd5b8135610fd481610f5c565b9392505050565b600080600060608486031215610ff057600080fd5b8335610ffb81610f5c565b9250602084013561100b81610f5c565b929592945050506040919091013590565b60006020828403121561102e57600080fd5b8151610fd481610f5c565b60006020828403121561104b57600080fd5b5051919050565b60006020828403121561106457600080fd5b81518015158114610fd457600080fd5b60005b8381101561108f578181015183820152602001611077565b8381111561039c5750506000910152565b600082516110b2818460208701611074565b9190910192915050565b60208152600082518060208401526110db816040850160208701611074565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220eaa8ec181bda0d1900dd007b7cb67cc03fa52ee82d133822620d37483753787764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 922,
        "contract": "contracts/YieldGasController.sol:YieldGasController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6430,
        "contract": "contracts/YieldGasController.sol:YieldGasController",
        "label": "isDistributor",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}